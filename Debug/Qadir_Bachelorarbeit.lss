
Qadir_Bachelorarbeit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000bd0  00000c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080010c  0080010c  00000c70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9e  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000983  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079a  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
{
	//Initialiersierung von Initfunktionen:
	//Init();
		
	// Umwandlung der Positionen von mm in Schritten: (Digitalisierung)
	mx = xpos/(0.66);
  a6:	23 ec       	ldi	r18, 0xC3	; 195
  a8:	35 ef       	ldi	r19, 0xF5	; 245
  aa:	48 e2       	ldi	r20, 0x28	; 40
  ac:	5f e3       	ldi	r21, 0x3F	; 63
  ae:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <xpos>
  b2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <xpos+0x1>
  b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <xpos+0x2>
  ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <xpos+0x3>
  be:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
  c2:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
  c6:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <mx>
  ca:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <mx+0x1>
  ce:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mx+0x2>
  d2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <mx+0x3>
	if(mx > 0 ) mx +=1;
  d6:	16 16       	cp	r1, r22
  d8:	17 06       	cpc	r1, r23
  da:	18 06       	cpc	r1, r24
  dc:	19 06       	cpc	r1, r25
  de:	6c f4       	brge	.+26     	; 0xfa <main+0x54>
  e0:	dc 01       	movw	r26, r24
  e2:	cb 01       	movw	r24, r22
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	a1 1d       	adc	r26, r1
  e8:	b1 1d       	adc	r27, r1
  ea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mx>
  ee:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mx+0x1>
  f2:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <mx+0x2>
  f6:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <mx+0x3>
	if(mx < 0 ) mx -=1;
  fa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mx>
  fe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <mx+0x1>
 102:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <mx+0x2>
 106:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <mx+0x3>
 10a:	bb 23       	and	r27, r27
 10c:	5c f4       	brge	.+22     	; 0x124 <main+0x7e>
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	a1 09       	sbc	r26, r1
 112:	b1 09       	sbc	r27, r1
 114:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mx>
 118:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mx+0x1>
 11c:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <mx+0x2>
 120:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <mx+0x3>
	my = ypos/(0.66);
 124:	23 ec       	ldi	r18, 0xC3	; 195
 126:	35 ef       	ldi	r19, 0xF5	; 245
 128:	48 e2       	ldi	r20, 0x28	; 40
 12a:	5f e3       	ldi	r21, 0x3F	; 63
 12c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <ypos>
 130:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <ypos+0x1>
 134:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ypos+0x2>
 138:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ypos+0x3>
 13c:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
 140:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 144:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <my>
 148:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <my+0x1>
 14c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <my+0x2>
 150:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <my+0x3>
	if(my > 0 ) my +=1;
 154:	16 16       	cp	r1, r22
 156:	17 06       	cpc	r1, r23
 158:	18 06       	cpc	r1, r24
 15a:	19 06       	cpc	r1, r25
 15c:	6c f4       	brge	.+26     	; 0x178 <main+0xd2>
 15e:	dc 01       	movw	r26, r24
 160:	cb 01       	movw	r24, r22
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
 168:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <my>
 16c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <my+0x1>
 170:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <my+0x2>
 174:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <my+0x3>
	if(my < 0 ) my -=1;
 178:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <my>
 17c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <my+0x1>
 180:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <my+0x2>
 184:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <my+0x3>
 188:	bb 23       	and	r27, r27
 18a:	5c f4       	brge	.+22     	; 0x1a2 <main+0xfc>
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	a1 09       	sbc	r26, r1
 190:	b1 09       	sbc	r27, r1
 192:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <my>
 196:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <my+0x1>
 19a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <my+0x2>
 19e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <my+0x3>
	
	// Berechnug der Schrittdauer; Schritte/gewünschte Zeit Interval
	schrittdauer_x = t/mx;
 1a2:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ae:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b2:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <mx>
 1b6:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <mx+0x1>
 1ba:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <mx+0x2>
 1be:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <mx+0x3>
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 1ca:	9b 01       	movw	r18, r22
 1cc:	ac 01       	movw	r20, r24
 1ce:	c3 01       	movw	r24, r6
 1d0:	b2 01       	movw	r22, r4
 1d2:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
	schrittdauer_x= (int)(schrittdauer_x + 0.5);
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	5f e3       	ldi	r21, 0x3F	; 63
 1de:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 1e2:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 1e6:	07 2e       	mov	r0, r23
 1e8:	00 0c       	add	r0, r0
 1ea:	88 0b       	sbc	r24, r24
 1ec:	99 0b       	sbc	r25, r25
 1ee:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 1f2:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <schrittdauer_x>
 1f6:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <schrittdauer_x+0x1>
 1fa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <schrittdauer_x+0x2>
 1fe:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <schrittdauer_x+0x3>
	schrittdauer_y = t/my;
 202:	80 90 1a 01 	lds	r8, 0x011A	; 0x80011a <my>
 206:	90 90 1b 01 	lds	r9, 0x011B	; 0x80011b <my+0x1>
 20a:	a0 90 1c 01 	lds	r10, 0x011C	; 0x80011c <my+0x2>
 20e:	b0 90 1d 01 	lds	r11, 0x011D	; 0x80011d <my+0x3>
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 21a:	9b 01       	movw	r18, r22
 21c:	ac 01       	movw	r20, r24
 21e:	c3 01       	movw	r24, r6
 220:	b2 01       	movw	r22, r4
 222:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
	schrittdauer_y = (int)(schrittdauer_y + 0.5);
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	5f e3       	ldi	r21, 0x3F	; 63
 22e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 232:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 236:	07 2e       	mov	r0, r23
 238:	00 0c       	add	r0, r0
 23a:	88 0b       	sbc	r24, r24
 23c:	99 0b       	sbc	r25, r25
 23e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 242:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <schrittdauer_y>
 246:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <schrittdauer_y+0x1>
 24a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <schrittdauer_y+0x2>
 24e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <schrittdauer_y+0x3>
	//!!!!!!!!!!!!!!!!!!! schritt_zeit_x und i_steps_x sind gliech!!!!!!!!!!!!!!!!!!!??????????
	// Berechnung der Schrittverhältnisse von my und my 
	if (mx > my || mx == my)
 252:	8c 14       	cp	r8, r12
 254:	9d 04       	cpc	r9, r13
 256:	ae 04       	cpc	r10, r14
 258:	bf 04       	cpc	r11, r15
 25a:	2c f0       	brlt	.+10     	; 0x266 <main+0x1c0>
 25c:	c8 14       	cp	r12, r8
 25e:	d9 04       	cpc	r13, r9
 260:	ea 04       	cpc	r14, r10
 262:	fb 04       	cpc	r15, r11
 264:	f1 f5       	brne	.+124    	; 0x2e2 <main+0x23c>
	{
		i_steps_x = mx/my;
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	a5 01       	movw	r20, r10
 26c:	94 01       	movw	r18, r8
 26e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 272:	ca 01       	movw	r24, r20
 274:	b9 01       	movw	r22, r18
 276:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
		i_steps_x = (int)(i_steps_x + 0.5);
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	5f e3       	ldi	r21, 0x3F	; 63
 282:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 286:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 28a:	07 2e       	mov	r0, r23
 28c:	00 0c       	add	r0, r0
 28e:	88 0b       	sbc	r24, r24
 290:	99 0b       	sbc	r25, r25
 292:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 296:	9b 01       	movw	r18, r22
 298:	ac 01       	movw	r20, r24
 29a:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <i_steps_x>
 29e:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <i_steps_x+0x1>
 2a2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i_steps_x+0x2>
 2a6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <i_steps_x+0x3>
		i_steps_y = 1/i_steps_x;
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	9f e3       	ldi	r25, 0x3F	; 63
 2b2:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
		i_steps_y = (int)(i_steps_y + 0.5);
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	5f e3       	ldi	r21, 0x3F	; 63
 2be:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 2c2:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 2c6:	07 2e       	mov	r0, r23
 2c8:	00 0c       	add	r0, r0
 2ca:	88 0b       	sbc	r24, r24
 2cc:	99 0b       	sbc	r25, r25
 2ce:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 2d2:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <i_steps_y>
 2d6:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <i_steps_y+0x1>
 2da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <i_steps_y+0x2>
 2de:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <i_steps_y+0x3>
	}
	if (my > mx)
 2e2:	c8 14       	cp	r12, r8
 2e4:	d9 04       	cpc	r13, r9
 2e6:	ea 04       	cpc	r14, r10
 2e8:	fb 04       	cpc	r15, r11
 2ea:	f4 f5       	brge	.+124    	; 0x368 <main+0x2c2>
	{
		i_steps_y = my/mx;
 2ec:	c5 01       	movw	r24, r10
 2ee:	b4 01       	movw	r22, r8
 2f0:	a7 01       	movw	r20, r14
 2f2:	96 01       	movw	r18, r12
 2f4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 2f8:	ca 01       	movw	r24, r20
 2fa:	b9 01       	movw	r22, r18
 2fc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
		i_steps_y = (int)(i_steps_y + 0.5);
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	5f e3       	ldi	r21, 0x3F	; 63
 308:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 30c:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 310:	07 2e       	mov	r0, r23
 312:	00 0c       	add	r0, r0
 314:	88 0b       	sbc	r24, r24
 316:	99 0b       	sbc	r25, r25
 318:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 31c:	9b 01       	movw	r18, r22
 31e:	ac 01       	movw	r20, r24
 320:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <i_steps_y>
 324:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <i_steps_y+0x1>
 328:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <i_steps_y+0x2>
 32c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <i_steps_y+0x3>
		i_steps_x = 1/i_steps_y;
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	9f e3       	ldi	r25, 0x3F	; 63
 338:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
		i_steps_x = (int)(i_steps_x + 0.5);
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	5f e3       	ldi	r21, 0x3F	; 63
 344:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 348:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 34c:	07 2e       	mov	r0, r23
 34e:	00 0c       	add	r0, r0
 350:	88 0b       	sbc	r24, r24
 352:	99 0b       	sbc	r25, r25
 354:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 358:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <i_steps_x>
 35c:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <i_steps_x+0x1>
 360:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i_steps_x+0x2>
 364:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <i_steps_x+0x3>
	}

    // setup dirPin and stepPin as output // Bitts werden gesetzt = 1
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
 368:	8a b1       	in	r24, 0x0a	; 10
 36a:	8c 66       	ori	r24, 0x6C	; 108
 36c:	8a b9       	out	0x0a, r24	; 10
		//movingToX (mx);
		//movingToY (my);
	//========================================While-Schleife====================================================//
	while(1){
		
		for (int i = 0; i < t; i++ )
 36e:	c0 e0       	ldi	r28, 0x00	; 0
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	b5 c1       	rjmp	.+874    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
		{
			int32_t z = t;
 374:	c5 01       	movw	r24, r10
 376:	b4 01       	movw	r22, r8
 378:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 37c:	6b 01       	movw	r12, r22
 37e:	7c 01       	movw	r14, r24
				
			if (t > 0)
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	a9 01       	movw	r20, r18
 386:	c5 01       	movw	r24, r10
 388:	b4 01       	movw	r22, r8
 38a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__gesf2>
 38e:	18 16       	cp	r1, r24
 390:	0c f0       	brlt	.+2      	; 0x394 <main+0x2ee>
 392:	a4 c1       	rjmp	.+840    	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
			{
				while (1) {
				z %=2;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	c8 22       	and	r12, r24
 398:	dd 24       	eor	r13, r13
 39a:	ee 24       	eor	r14, r14
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	f8 22       	and	r15, r24
 3a0:	ff 20       	and	r15, r15
 3a2:	84 f4       	brge	.+32     	; 0x3c4 <main+0x31e>
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	c9 1a       	sub	r12, r25
 3a8:	d1 08       	sbc	r13, r1
 3aa:	e1 08       	sbc	r14, r1
 3ac:	f1 08       	sbc	r15, r1
 3ae:	8e ef       	ldi	r24, 0xFE	; 254
 3b0:	c8 2a       	or	r12, r24
 3b2:	dd 24       	eor	r13, r13
 3b4:	da 94       	dec	r13
 3b6:	ed 2c       	mov	r14, r13
 3b8:	fe 2c       	mov	r15, r14
 3ba:	9f ef       	ldi	r25, 0xFF	; 255
 3bc:	c9 1a       	sub	r12, r25
 3be:	d9 0a       	sbc	r13, r25
 3c0:	e9 0a       	sbc	r14, r25
 3c2:	f9 0a       	sbc	r15, r25
				if (z == 0)
 3c4:	c1 14       	cp	r12, r1
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <main+0x32a>
 3ce:	bf c0       	rjmp	.+382    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
				{
					t--;//Die Zeit wird um i_steps_x verringert weil die Funktion _delay_ms so oft gestartet wird 
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e8       	ldi	r20, 0x80	; 128
 3d6:	5f e3       	ldi	r21, 0x3F	; 63
 3d8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3dc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3e8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__subsf3>
 3ec:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					
					if (mx > 0)
 3fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mx>
 400:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <mx+0x1>
 404:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <mx+0x2>
 408:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <mx+0x3>
 40c:	18 16       	cp	r1, r24
 40e:	19 06       	cpc	r1, r25
 410:	1a 06       	cpc	r1, r26
 412:	1b 06       	cpc	r1, r27
 414:	0c f4       	brge	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 416:	5a c0       	rjmp	.+180    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 418:	72 c0       	rjmp	.+228    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41a:	8f e9       	ldi	r24, 0x9F	; 159
 41c:	9f e0       	ldi	r25, 0x0F	; 15
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
						int flagx = 0;
						// Schrittdauer daurch laufen:
						for (int j = 0; j < schrittdauer_x; j++)
						{	
							_delay_ms(1);
							flagx++;
 426:	0f 5f       	subi	r16, 0xFF	; 255
 428:	1f 4f       	sbci	r17, 0xFF	; 255
							if (flagx == schrittdauer_x)
 42a:	b8 01       	movw	r22, r16
 42c:	01 2e       	mov	r0, r17
 42e:	00 0c       	add	r0, r0
 430:	88 0b       	sbc	r24, r24
 432:	99 0b       	sbc	r25, r25
 434:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 438:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <schrittdauer_x>
 43c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <schrittdauer_x+0x1>
 440:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <schrittdauer_x+0x2>
 444:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <schrittdauer_x+0x3>
 448:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 44c:	88 23       	and	r24, r24
 44e:	39 f1       	breq	.+78     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 450:	3b c0       	rjmp	.+118    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
							{
									for (int i = 0; i < i_steps_x; i++)
									{
										mx--;
 452:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mx>
 456:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <mx+0x1>
 45a:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <mx+0x2>
 45e:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <mx+0x3>
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	a1 09       	sbc	r26, r1
 466:	b1 09       	sbc	r27, r1
 468:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mx>
 46c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mx+0x1>
 470:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <mx+0x2>
 474:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <mx+0x3>
										//send low pulse for clockwise direction
										PORTD &= ~dirPinX;
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	8f 7d       	andi	r24, 0xDF	; 223
 47c:	8b b9       	out	0x0b, r24	; 11
										//send 200 pulses to rotate One full cycle
										PORTD |= stepPinX;
 47e:	8b b1       	in	r24, 0x0b	; 11
 480:	84 60       	ori	r24, 0x04	; 4
 482:	8b b9       	out	0x0b, r24	; 11
										//_delay_ms(1);
										PORTD &= ~stepPinX;
 484:	8b b1       	in	r24, 0x0b	; 11
 486:	8b 7f       	andi	r24, 0xFB	; 251
 488:	8b b9       	out	0x0b, r24	; 11
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
						{	
							_delay_ms(1);
							flagx++;
							if (flagx == schrittdauer_x)
							{
									for (int i = 0; i < i_steps_x; i++)
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	e9 1a       	sub	r14, r25
 49a:	f9 0a       	sbc	r15, r25
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	e1 2c       	mov	r14, r1
 4a0:	f1 2c       	mov	r15, r1
 4a2:	b7 01       	movw	r22, r14
 4a4:	0f 2c       	mov	r0, r15
 4a6:	00 0c       	add	r0, r0
 4a8:	88 0b       	sbc	r24, r24
 4aa:	99 0b       	sbc	r25, r25
 4ac:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 4b0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <i_steps_x>
 4b4:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <i_steps_x+0x1>
 4b8:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <i_steps_x+0x2>
 4bc:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <i_steps_x+0x3>
 4c0:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 4c4:	88 23       	and	r24, r24
 4c6:	2c f2       	brlt	.-118    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
					
					if (mx > 0)
					{	
						int flagx = 0;
						// Schrittdauer daurch laufen:
						for (int j = 0; j < schrittdauer_x; j++)
 4c8:	21 96       	adiw	r28, 0x01	; 1
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
 4d0:	00 e0       	ldi	r16, 0x00	; 0
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	be 01       	movw	r22, r28
 4d6:	0d 2e       	mov	r0, r29
 4d8:	00 0c       	add	r0, r0
 4da:	88 0b       	sbc	r24, r24
 4dc:	99 0b       	sbc	r25, r25
 4de:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 4e2:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <schrittdauer_x>
 4e6:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <schrittdauer_x+0x1>
 4ea:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <schrittdauer_x+0x2>
 4ee:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <schrittdauer_x+0x3>
 4f2:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 4f6:	88 23       	and	r24, r24
 4f8:	0c f4       	brge	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	8f cf       	rjmp	.-226    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 4fc:	1c c0       	rjmp	.+56     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
							}
							
						}
							
						
					} else if (mx < 0)
 4fe:	bb 23       	and	r27, r27
 500:	d4 f4       	brge	.+52     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
					{

						mx++;
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	a1 1d       	adc	r26, r1
 506:	b1 1d       	adc	r27, r1
 508:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mx>
 50c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mx+0x1>
 510:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <mx+0x2>
 514:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <mx+0x3>
						//mx *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinX;
 518:	8b b1       	in	r24, 0x0b	; 11
 51a:	80 62       	ori	r24, 0x20	; 32
 51c:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinX;
 51e:	8b b1       	in	r24, 0x0b	; 11
 520:	84 60       	ori	r24, 0x04	; 4
 522:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinX;
 524:	8b b1       	in	r24, 0x0b	; 11
 526:	8b 7f       	andi	r24, 0xFB	; 251
 528:	8b b9       	out	0x0b, r24	; 11
 52a:	8f e9       	ldi	r24, 0x9F	; 159
 52c:	9f e0       	ldi	r25, 0x0F	; 15
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 532:	00 c0       	rjmp	.+0      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 534:	00 00       	nop
						_delay_ms(1);
						
					}
					z= t;
 536:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 53a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 53e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 542:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 546:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 54a:	6b 01       	movw	r12, r22
 54c:	7c 01       	movw	r14, r24
					}
				if (z == 1)
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	c9 16       	cp	r12, r25
 552:	d1 04       	cpc	r13, r1
 554:	e1 04       	cpc	r14, r1
 556:	f1 04       	cpc	r15, r1
 558:	09 f0       	breq	.+2      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 55a:	1c cf       	rjmp	.-456    	; 0x394 <main+0x2ee>
				{
					t--;//Die Zeit wird um i_steps_y verringert weil die Funktion _delay_ms so oft gestartet wird 
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	40 e8       	ldi	r20, 0x80	; 128
 562:	5f e3       	ldi	r21, 0x3F	; 63
 564:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 568:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 56c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 570:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 574:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__subsf3>
 578:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 57c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 580:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 584:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					
					if(my > 0)
 588:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <my>
 58c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <my+0x1>
 590:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <my+0x2>
 594:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <my+0x3>
 598:	18 16       	cp	r1, r24
 59a:	19 06       	cpc	r1, r25
 59c:	1a 06       	cpc	r1, r26
 59e:	1b 06       	cpc	r1, r27
 5a0:	0c f4       	brge	.+2      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a2:	5a c0       	rjmp	.+180    	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
 5a4:	72 c0       	rjmp	.+228    	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 5a6:	8f e9       	ldi	r24, 0x9F	; 159
 5a8:	9f e0       	ldi	r25, 0x0F	; 15
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 5b0:	00 00       	nop
					{	
							int flagy = 0;
							for (int j = 0; j < schrittdauer_y; j++)
							{
										_delay_ms(1);
										flagy++;
 5b2:	0f 5f       	subi	r16, 0xFF	; 255
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
										if (flagy == schrittdauer_y)
 5b6:	b8 01       	movw	r22, r16
 5b8:	01 2e       	mov	r0, r17
 5ba:	00 0c       	add	r0, r0
 5bc:	88 0b       	sbc	r24, r24
 5be:	99 0b       	sbc	r25, r25
 5c0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 5c4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <schrittdauer_y>
 5c8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <schrittdauer_y+0x1>
 5cc:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <schrittdauer_y+0x2>
 5d0:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <schrittdauer_y+0x3>
 5d4:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 5d8:	88 23       	and	r24, r24
 5da:	39 f1       	breq	.+78     	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
 5dc:	3b c0       	rjmp	.+118    	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
										{
												for (int i = 0; i < i_steps_y; i++)
												{
													my--;
 5de:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <my>
 5e2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <my+0x1>
 5e6:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <my+0x2>
 5ea:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <my+0x3>
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	a1 09       	sbc	r26, r1
 5f2:	b1 09       	sbc	r27, r1
 5f4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <my>
 5f8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <my+0x1>
 5fc:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <my+0x2>
 600:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <my+0x3>
													PORTD &= ~dirPinY;
 604:	8b b1       	in	r24, 0x0b	; 11
 606:	8f 7b       	andi	r24, 0xBF	; 191
 608:	8b b9       	out	0x0b, r24	; 11
													//send 200 pulses to rotate One full cycle
													
													PORTD |= stepPinY;
 60a:	8b b1       	in	r24, 0x0b	; 11
 60c:	88 60       	ori	r24, 0x08	; 8
 60e:	8b b9       	out	0x0b, r24	; 11
													//_delay_ms(1);
													PORTD &= ~stepPinY;
 610:	8b b1       	in	r24, 0x0b	; 11
 612:	87 7f       	andi	r24, 0xF7	; 247
 614:	8b b9       	out	0x0b, r24	; 11
 616:	8f e9       	ldi	r24, 0x9F	; 159
 618:	9f e0       	ldi	r25, 0x0F	; 15
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
 620:	00 00       	nop
							{
										_delay_ms(1);
										flagy++;
										if (flagy == schrittdauer_y)
										{
												for (int i = 0; i < i_steps_y; i++)
 622:	9f ef       	ldi	r25, 0xFF	; 255
 624:	e9 1a       	sub	r14, r25
 626:	f9 0a       	sbc	r15, r25
 628:	02 c0       	rjmp	.+4      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 62a:	e1 2c       	mov	r14, r1
 62c:	f1 2c       	mov	r15, r1
 62e:	b7 01       	movw	r22, r14
 630:	0f 2c       	mov	r0, r15
 632:	00 0c       	add	r0, r0
 634:	88 0b       	sbc	r24, r24
 636:	99 0b       	sbc	r25, r25
 638:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 63c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <i_steps_y>
 640:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <i_steps_y+0x1>
 644:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <i_steps_y+0x2>
 648:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <i_steps_y+0x3>
 64c:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 650:	88 23       	and	r24, r24
 652:	2c f2       	brlt	.-118    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
					t--;//Die Zeit wird um i_steps_y verringert weil die Funktion _delay_ms so oft gestartet wird 
					
					if(my > 0)
					{	
							int flagy = 0;
							for (int j = 0; j < schrittdauer_y; j++)
 654:	21 96       	adiw	r28, 0x01	; 1
 656:	04 c0       	rjmp	.+8      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
 658:	c0 e0       	ldi	r28, 0x00	; 0
 65a:	d0 e0       	ldi	r29, 0x00	; 0
 65c:	00 e0       	ldi	r16, 0x00	; 0
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	be 01       	movw	r22, r28
 662:	0d 2e       	mov	r0, r29
 664:	00 0c       	add	r0, r0
 666:	88 0b       	sbc	r24, r24
 668:	99 0b       	sbc	r25, r25
 66a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 66e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <schrittdauer_y>
 672:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <schrittdauer_y+0x1>
 676:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <schrittdauer_y+0x2>
 67a:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <schrittdauer_y+0x3>
 67e:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 682:	88 23       	and	r24, r24
 684:	0c f4       	brge	.+2      	; 0x688 <__EEPROM_REGION_LENGTH__+0x288>
 686:	8f cf       	rjmp	.-226    	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 688:	1c c0       	rjmp	.+56     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
										
										
							}
						
						
					} else if (my < 0)
 68a:	bb 23       	and	r27, r27
 68c:	d4 f4       	brge	.+52     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
					{
						my++;
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	a1 1d       	adc	r26, r1
 692:	b1 1d       	adc	r27, r1
 694:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <my>
 698:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <my+0x1>
 69c:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <my+0x2>
 6a0:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <my+0x3>
						//my *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinY;
 6a4:	8b b1       	in	r24, 0x0b	; 11
 6a6:	80 64       	ori	r24, 0x40	; 64
 6a8:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 6aa:	8b b1       	in	r24, 0x0b	; 11
 6ac:	88 60       	ori	r24, 0x08	; 8
 6ae:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 6b0:	8b b1       	in	r24, 0x0b	; 11
 6b2:	87 7f       	andi	r24, 0xF7	; 247
 6b4:	8b b9       	out	0x0b, r24	; 11
 6b6:	8f e9       	ldi	r24, 0x9F	; 159
 6b8:	9f e0       	ldi	r25, 0x0F	; 15
 6ba:	01 97       	sbiw	r24, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
 6c0:	00 00       	nop
						_delay_ms(1);
					}
					z= t;
 6c2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6c6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6d2:	0e 94 b8 04 	call	0x970	; 0x970 <__fixsfsi>
 6d6:	6b 01       	movw	r12, r22
 6d8:	7c 01       	movw	r14, r24
 6da:	5c ce       	rjmp	.-840    	; 0x394 <main+0x2ee>
		//movingToX (mx);
		//movingToY (my);
	//========================================While-Schleife====================================================//
	while(1){
		
		for (int i = 0; i < t; i++ )
 6dc:	21 96       	adiw	r28, 0x01	; 1
 6de:	be 01       	movw	r22, r28
 6e0:	0d 2e       	mov	r0, r29
 6e2:	00 0c       	add	r0, r0
 6e4:	88 0b       	sbc	r24, r24
 6e6:	99 0b       	sbc	r25, r25
 6e8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__floatsisf>
 6ec:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6f0:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6f4:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6f8:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6fc:	a5 01       	movw	r20, r10
 6fe:	94 01       	movw	r18, r8
 700:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 704:	88 23       	and	r24, r24
 706:	0c f4       	brge	.+2      	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
 708:	35 ce       	rjmp	.-918    	; 0x374 <main+0x2ce>
 70a:	31 ce       	rjmp	.-926    	; 0x36e <main+0x2c8>

0000070c <__vector_14>:
	}
	return TIMER_RUNNING;
}

ISR(TIMER0_COMPA_vect)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	8f 93       	push	r24
	ucFlag10ms = 1;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ucFlag10ms>
	ucCnt100ms++;
 71e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ucCnt100ms>
 722:	8f 5f       	subi	r24, 0xFF	; 255
 724:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ucCnt100ms>
	if(ucCnt100ms == 10)
 728:	8a 30       	cpi	r24, 0x0A	; 10
 72a:	89 f4       	brne	.+34     	; 0x74e <__vector_14+0x42>
	{//100ms sind vergangen
		ucCnt100ms = 0;
 72c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ucCnt100ms>
		ucFLag100ms = 1;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ucFLag100ms>
		ucCnt500ms++;
 736:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 73a:	8f 5f       	subi	r24, 0xFF	; 255
 73c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if (ucCnt500ms==5)
 740:	85 30       	cpi	r24, 0x05	; 5
 742:	29 f4       	brne	.+10     	; 0x74e <__vector_14+0x42>
		{
			ucCnt500ms=0;
 744:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			ucFlag500ms=1;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ucFlag500ms>
		}
	}
 74e:	8f 91       	pop	r24
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_11>:
	}
	return TIMER1_RUNNING;
}

ISR(TIMER1_COMPA_vect)
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	8f 93       	push	r24
	ucFlagT1_10ms = 1;
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ucFlagT1_10ms>
	ucCntT1_10ms++;		// wird jede 10 ms inkrementiert
 76c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ucCntT1_10ms>
 770:	8f 5f       	subi	r24, 0xFF	; 255
 772:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ucCntT1_10ms>
	if(ucCntT1_10ms == 10)
 776:	8a 30       	cpi	r24, 0x0A	; 10
 778:	89 f4       	brne	.+34     	; 0x79c <__vector_11+0x42>
	// disen kannst du verändern um zb. 1s zu erhalten mal 10
	// und dann sagst du einfach ucFlag1000ms =1 weil es dann erfüllt ist!!!
	{//100ms sind vergangen
		ucCntT1_10ms = 0;
 77a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ucCntT1_10ms>
		ucFlagT1_100ms = 1;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ucFlagT1_100ms>
		
		// will man z.B. für 1 Sekunde aber die Funktion müssen wir dann in der main
		// wie die andren Funktionen dann Programmieren :)
		ucCntT1_100ms++;
 784:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ucCntT1_100ms>
 788:	8f 5f       	subi	r24, 0xFF	; 255
 78a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ucCntT1_100ms>
		if (ucCntT1_100ms==10)
 78e:	8a 30       	cpi	r24, 0x0A	; 10
 790:	29 f4       	brne	.+10     	; 0x79c <__vector_11+0x42>
		{
			ucCntT1_100ms=0;
 792:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ucCntT1_100ms>
			ucFlagT1_1000ms=1;
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ucFlagT1_1000ms>
		}
	}
 79c:	8f 91       	pop	r24
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__subsf3>:
 7a8:	50 58       	subi	r21, 0x80	; 128

000007aa <__addsf3>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	aa 27       	eor	r26, r26
 7ae:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__addsf3x>
 7b2:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_round>
 7b6:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscA>
 7ba:	38 f0       	brcs	.+14     	; 0x7ca <__addsf3+0x20>
 7bc:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscB>
 7c0:	20 f0       	brcs	.+8      	; 0x7ca <__addsf3+0x20>
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <__addsf3+0x28>
 7c4:	9f 3f       	cpi	r25, 0xFF	; 255
 7c6:	19 f4       	brne	.+6      	; 0x7ce <__addsf3+0x24>
 7c8:	26 f4       	brtc	.+8      	; 0x7d2 <__addsf3+0x28>
 7ca:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_nan>
 7ce:	0e f4       	brtc	.+2      	; 0x7d2 <__addsf3+0x28>
 7d0:	e0 95       	com	r30
 7d2:	e7 fb       	bst	r30, 7
 7d4:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>

000007d8 <__addsf3x>:
 7d8:	e9 2f       	mov	r30, r25
 7da:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_split3>
 7de:	58 f3       	brcs	.-42     	; 0x7b6 <__addsf3+0xc>
 7e0:	ba 17       	cp	r27, r26
 7e2:	62 07       	cpc	r22, r18
 7e4:	73 07       	cpc	r23, r19
 7e6:	84 07       	cpc	r24, r20
 7e8:	95 07       	cpc	r25, r21
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__addsf3x+0x1c>
 7ec:	79 f4       	brne	.+30     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ee:	a6 f5       	brtc	.+104    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 7f0:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_zero>
 7f4:	0e f4       	brtc	.+2      	; 0x7f8 <__addsf3x+0x20>
 7f6:	e0 95       	com	r30
 7f8:	0b 2e       	mov	r0, r27
 7fa:	ba 2f       	mov	r27, r26
 7fc:	a0 2d       	mov	r26, r0
 7fe:	0b 01       	movw	r0, r22
 800:	b9 01       	movw	r22, r18
 802:	90 01       	movw	r18, r0
 804:	0c 01       	movw	r0, r24
 806:	ca 01       	movw	r24, r20
 808:	a0 01       	movw	r20, r0
 80a:	11 24       	eor	r1, r1
 80c:	ff 27       	eor	r31, r31
 80e:	59 1b       	sub	r21, r25
 810:	99 f0       	breq	.+38     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 812:	59 3f       	cpi	r21, 0xF9	; 249
 814:	50 f4       	brcc	.+20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 816:	50 3e       	cpi	r21, 0xE0	; 224
 818:	68 f1       	brcs	.+90     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 81a:	1a 16       	cp	r1, r26
 81c:	f0 40       	sbci	r31, 0x00	; 0
 81e:	a2 2f       	mov	r26, r18
 820:	23 2f       	mov	r18, r19
 822:	34 2f       	mov	r19, r20
 824:	44 27       	eor	r20, r20
 826:	58 5f       	subi	r21, 0xF8	; 248
 828:	f3 cf       	rjmp	.-26     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 82a:	46 95       	lsr	r20
 82c:	37 95       	ror	r19
 82e:	27 95       	ror	r18
 830:	a7 95       	ror	r26
 832:	f0 40       	sbci	r31, 0x00	; 0
 834:	53 95       	inc	r21
 836:	c9 f7       	brne	.-14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 838:	7e f4       	brtc	.+30     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 83a:	1f 16       	cp	r1, r31
 83c:	ba 0b       	sbc	r27, r26
 83e:	62 0b       	sbc	r22, r18
 840:	73 0b       	sbc	r23, r19
 842:	84 0b       	sbc	r24, r20
 844:	ba f0       	brmi	.+46     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 846:	91 50       	subi	r25, 0x01	; 1
 848:	a1 f0       	breq	.+40     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 84a:	ff 0f       	add	r31, r31
 84c:	bb 1f       	adc	r27, r27
 84e:	66 1f       	adc	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	c2 f7       	brpl	.-16     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 856:	0e c0       	rjmp	.+28     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 858:	ba 0f       	add	r27, r26
 85a:	62 1f       	adc	r22, r18
 85c:	73 1f       	adc	r23, r19
 85e:	84 1f       	adc	r24, r20
 860:	48 f4       	brcc	.+18     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 862:	87 95       	ror	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b7 95       	ror	r27
 86a:	f7 95       	ror	r31
 86c:	9e 3f       	cpi	r25, 0xFE	; 254
 86e:	08 f0       	brcs	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 870:	b0 cf       	rjmp	.-160    	; 0x7d2 <__addsf3+0x28>
 872:	93 95       	inc	r25
 874:	88 0f       	add	r24, r24
 876:	08 f0       	brcs	.+2      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 878:	99 27       	eor	r25, r25
 87a:	ee 0f       	add	r30, r30
 87c:	97 95       	ror	r25
 87e:	87 95       	ror	r24
 880:	08 95       	ret

00000882 <__cmpsf2>:
 882:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_cmp>
 886:	08 f4       	brcc	.+2      	; 0x88a <__cmpsf2+0x8>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	08 95       	ret

0000088c <__divsf3>:
 88c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divsf3x>
 890:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_round>
 894:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscB>
 898:	58 f0       	brcs	.+22     	; 0x8b0 <__divsf3+0x24>
 89a:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscA>
 89e:	40 f0       	brcs	.+16     	; 0x8b0 <__divsf3+0x24>
 8a0:	29 f4       	brne	.+10     	; 0x8ac <__divsf3+0x20>
 8a2:	5f 3f       	cpi	r21, 0xFF	; 255
 8a4:	29 f0       	breq	.+10     	; 0x8b0 <__divsf3+0x24>
 8a6:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>
 8aa:	51 11       	cpse	r21, r1
 8ac:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 8b0:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_nan>

000008b4 <__divsf3x>:
 8b4:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_split3>
 8b8:	68 f3       	brcs	.-38     	; 0x894 <__divsf3+0x8>

000008ba <__divsf3_pse>:
 8ba:	99 23       	and	r25, r25
 8bc:	b1 f3       	breq	.-20     	; 0x8aa <__divsf3+0x1e>
 8be:	55 23       	and	r21, r21
 8c0:	91 f3       	breq	.-28     	; 0x8a6 <__divsf3+0x1a>
 8c2:	95 1b       	sub	r25, r21
 8c4:	55 0b       	sbc	r21, r21
 8c6:	bb 27       	eor	r27, r27
 8c8:	aa 27       	eor	r26, r26
 8ca:	62 17       	cp	r22, r18
 8cc:	73 07       	cpc	r23, r19
 8ce:	84 07       	cpc	r24, r20
 8d0:	38 f0       	brcs	.+14     	; 0x8e0 <__divsf3_pse+0x26>
 8d2:	9f 5f       	subi	r25, 0xFF	; 255
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255
 8d6:	22 0f       	add	r18, r18
 8d8:	33 1f       	adc	r19, r19
 8da:	44 1f       	adc	r20, r20
 8dc:	aa 1f       	adc	r26, r26
 8de:	a9 f3       	breq	.-22     	; 0x8ca <__divsf3_pse+0x10>
 8e0:	35 d0       	rcall	.+106    	; 0x94c <__stack+0x4d>
 8e2:	0e 2e       	mov	r0, r30
 8e4:	3a f0       	brmi	.+14     	; 0x8f4 <__divsf3_pse+0x3a>
 8e6:	e0 e8       	ldi	r30, 0x80	; 128
 8e8:	32 d0       	rcall	.+100    	; 0x94e <__stack+0x4f>
 8ea:	91 50       	subi	r25, 0x01	; 1
 8ec:	50 40       	sbci	r21, 0x00	; 0
 8ee:	e6 95       	lsr	r30
 8f0:	00 1c       	adc	r0, r0
 8f2:	ca f7       	brpl	.-14     	; 0x8e6 <__divsf3_pse+0x2c>
 8f4:	2b d0       	rcall	.+86     	; 0x94c <__stack+0x4d>
 8f6:	fe 2f       	mov	r31, r30
 8f8:	29 d0       	rcall	.+82     	; 0x94c <__stack+0x4d>
 8fa:	66 0f       	add	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	bb 1f       	adc	r27, r27
 902:	26 17       	cp	r18, r22
 904:	37 07       	cpc	r19, r23
 906:	48 07       	cpc	r20, r24
 908:	ab 07       	cpc	r26, r27
 90a:	b0 e8       	ldi	r27, 0x80	; 128
 90c:	09 f0       	breq	.+2      	; 0x910 <__stack+0x11>
 90e:	bb 0b       	sbc	r27, r27
 910:	80 2d       	mov	r24, r0
 912:	bf 01       	movw	r22, r30
 914:	ff 27       	eor	r31, r31
 916:	93 58       	subi	r25, 0x83	; 131
 918:	5f 4f       	sbci	r21, 0xFF	; 255
 91a:	3a f0       	brmi	.+14     	; 0x92a <__stack+0x2b>
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	51 05       	cpc	r21, r1
 920:	78 f0       	brcs	.+30     	; 0x940 <__stack+0x41>
 922:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>
 926:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	e4 f3       	brlt	.-8      	; 0x926 <__stack+0x27>
 92e:	98 3e       	cpi	r25, 0xE8	; 232
 930:	d4 f3       	brlt	.-12     	; 0x926 <__stack+0x27>
 932:	86 95       	lsr	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	9f 5f       	subi	r25, 0xFF	; 255
 93e:	c9 f7       	brne	.-14     	; 0x932 <__stack+0x33>
 940:	88 0f       	add	r24, r24
 942:	91 1d       	adc	r25, r1
 944:	96 95       	lsr	r25
 946:	87 95       	ror	r24
 948:	97 f9       	bld	r25, 7
 94a:	08 95       	ret
 94c:	e1 e0       	ldi	r30, 0x01	; 1
 94e:	66 0f       	add	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	bb 1f       	adc	r27, r27
 956:	62 17       	cp	r22, r18
 958:	73 07       	cpc	r23, r19
 95a:	84 07       	cpc	r24, r20
 95c:	ba 07       	cpc	r27, r26
 95e:	20 f0       	brcs	.+8      	; 0x968 <__stack+0x69>
 960:	62 1b       	sub	r22, r18
 962:	73 0b       	sbc	r23, r19
 964:	84 0b       	sbc	r24, r20
 966:	ba 0b       	sbc	r27, r26
 968:	ee 1f       	adc	r30, r30
 96a:	88 f7       	brcc	.-30     	; 0x94e <__stack+0x4f>
 96c:	e0 95       	com	r30
 96e:	08 95       	ret

00000970 <__fixsfsi>:
 970:	0e 94 bf 04 	call	0x97e	; 0x97e <__fixunssfsi>
 974:	68 94       	set
 976:	b1 11       	cpse	r27, r1
 978:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 97c:	08 95       	ret

0000097e <__fixunssfsi>:
 97e:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_splitA>
 982:	88 f0       	brcs	.+34     	; 0x9a6 <__fixunssfsi+0x28>
 984:	9f 57       	subi	r25, 0x7F	; 127
 986:	98 f0       	brcs	.+38     	; 0x9ae <__fixunssfsi+0x30>
 988:	b9 2f       	mov	r27, r25
 98a:	99 27       	eor	r25, r25
 98c:	b7 51       	subi	r27, 0x17	; 23
 98e:	b0 f0       	brcs	.+44     	; 0x9bc <__fixunssfsi+0x3e>
 990:	e1 f0       	breq	.+56     	; 0x9ca <__fixunssfsi+0x4c>
 992:	66 0f       	add	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	1a f0       	brmi	.+6      	; 0x9a2 <__fixunssfsi+0x24>
 99c:	ba 95       	dec	r27
 99e:	c9 f7       	brne	.-14     	; 0x992 <__fixunssfsi+0x14>
 9a0:	14 c0       	rjmp	.+40     	; 0x9ca <__fixunssfsi+0x4c>
 9a2:	b1 30       	cpi	r27, 0x01	; 1
 9a4:	91 f0       	breq	.+36     	; 0x9ca <__fixunssfsi+0x4c>
 9a6:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_zero>
 9aa:	b1 e0       	ldi	r27, 0x01	; 1
 9ac:	08 95       	ret
 9ae:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_zero>
 9b2:	67 2f       	mov	r22, r23
 9b4:	78 2f       	mov	r23, r24
 9b6:	88 27       	eor	r24, r24
 9b8:	b8 5f       	subi	r27, 0xF8	; 248
 9ba:	39 f0       	breq	.+14     	; 0x9ca <__fixunssfsi+0x4c>
 9bc:	b9 3f       	cpi	r27, 0xF9	; 249
 9be:	cc f3       	brlt	.-14     	; 0x9b2 <__fixunssfsi+0x34>
 9c0:	86 95       	lsr	r24
 9c2:	77 95       	ror	r23
 9c4:	67 95       	ror	r22
 9c6:	b3 95       	inc	r27
 9c8:	d9 f7       	brne	.-10     	; 0x9c0 <__fixunssfsi+0x42>
 9ca:	3e f4       	brtc	.+14     	; 0x9da <__fixunssfsi+0x5c>
 9cc:	90 95       	com	r25
 9ce:	80 95       	com	r24
 9d0:	70 95       	com	r23
 9d2:	61 95       	neg	r22
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	08 95       	ret

000009dc <__floatunsisf>:
 9dc:	e8 94       	clt
 9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__floatsisf+0x12>

000009e0 <__floatsisf>:
 9e0:	97 fb       	bst	r25, 7
 9e2:	3e f4       	brtc	.+14     	; 0x9f2 <__floatsisf+0x12>
 9e4:	90 95       	com	r25
 9e6:	80 95       	com	r24
 9e8:	70 95       	com	r23
 9ea:	61 95       	neg	r22
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	8f 4f       	sbci	r24, 0xFF	; 255
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	99 23       	and	r25, r25
 9f4:	a9 f0       	breq	.+42     	; 0xa20 <__floatsisf+0x40>
 9f6:	f9 2f       	mov	r31, r25
 9f8:	96 e9       	ldi	r25, 0x96	; 150
 9fa:	bb 27       	eor	r27, r27
 9fc:	93 95       	inc	r25
 9fe:	f6 95       	lsr	r31
 a00:	87 95       	ror	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f1 11       	cpse	r31, r1
 a0a:	f8 cf       	rjmp	.-16     	; 0x9fc <__floatsisf+0x1c>
 a0c:	fa f4       	brpl	.+62     	; 0xa4c <__floatsisf+0x6c>
 a0e:	bb 0f       	add	r27, r27
 a10:	11 f4       	brne	.+4      	; 0xa16 <__floatsisf+0x36>
 a12:	60 ff       	sbrs	r22, 0
 a14:	1b c0       	rjmp	.+54     	; 0xa4c <__floatsisf+0x6c>
 a16:	6f 5f       	subi	r22, 0xFF	; 255
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	8f 4f       	sbci	r24, 0xFF	; 255
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	16 c0       	rjmp	.+44     	; 0xa4c <__floatsisf+0x6c>
 a20:	88 23       	and	r24, r24
 a22:	11 f0       	breq	.+4      	; 0xa28 <__floatsisf+0x48>
 a24:	96 e9       	ldi	r25, 0x96	; 150
 a26:	11 c0       	rjmp	.+34     	; 0xa4a <__floatsisf+0x6a>
 a28:	77 23       	and	r23, r23
 a2a:	21 f0       	breq	.+8      	; 0xa34 <__floatsisf+0x54>
 a2c:	9e e8       	ldi	r25, 0x8E	; 142
 a2e:	87 2f       	mov	r24, r23
 a30:	76 2f       	mov	r23, r22
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <__floatsisf+0x5e>
 a34:	66 23       	and	r22, r22
 a36:	71 f0       	breq	.+28     	; 0xa54 <__floatsisf+0x74>
 a38:	96 e8       	ldi	r25, 0x86	; 134
 a3a:	86 2f       	mov	r24, r22
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	2a f0       	brmi	.+10     	; 0xa4c <__floatsisf+0x6c>
 a42:	9a 95       	dec	r25
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	da f7       	brpl	.-10     	; 0xa42 <__floatsisf+0x62>
 a4c:	88 0f       	add	r24, r24
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__fp_cmp>:
 a56:	99 0f       	add	r25, r25
 a58:	00 08       	sbc	r0, r0
 a5a:	55 0f       	add	r21, r21
 a5c:	aa 0b       	sbc	r26, r26
 a5e:	e0 e8       	ldi	r30, 0x80	; 128
 a60:	fe ef       	ldi	r31, 0xFE	; 254
 a62:	16 16       	cp	r1, r22
 a64:	17 06       	cpc	r1, r23
 a66:	e8 07       	cpc	r30, r24
 a68:	f9 07       	cpc	r31, r25
 a6a:	c0 f0       	brcs	.+48     	; 0xa9c <__fp_cmp+0x46>
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	e4 07       	cpc	r30, r20
 a72:	f5 07       	cpc	r31, r21
 a74:	98 f0       	brcs	.+38     	; 0xa9c <__fp_cmp+0x46>
 a76:	62 1b       	sub	r22, r18
 a78:	73 0b       	sbc	r23, r19
 a7a:	84 0b       	sbc	r24, r20
 a7c:	95 0b       	sbc	r25, r21
 a7e:	39 f4       	brne	.+14     	; 0xa8e <__fp_cmp+0x38>
 a80:	0a 26       	eor	r0, r26
 a82:	61 f0       	breq	.+24     	; 0xa9c <__fp_cmp+0x46>
 a84:	23 2b       	or	r18, r19
 a86:	24 2b       	or	r18, r20
 a88:	25 2b       	or	r18, r21
 a8a:	21 f4       	brne	.+8      	; 0xa94 <__fp_cmp+0x3e>
 a8c:	08 95       	ret
 a8e:	0a 26       	eor	r0, r26
 a90:	09 f4       	brne	.+2      	; 0xa94 <__fp_cmp+0x3e>
 a92:	a1 40       	sbci	r26, 0x01	; 1
 a94:	a6 95       	lsr	r26
 a96:	8f ef       	ldi	r24, 0xFF	; 255
 a98:	81 1d       	adc	r24, r1
 a9a:	81 1d       	adc	r24, r1
 a9c:	08 95       	ret

00000a9e <__fp_inf>:
 a9e:	97 f9       	bld	r25, 7
 aa0:	9f 67       	ori	r25, 0x7F	; 127
 aa2:	80 e8       	ldi	r24, 0x80	; 128
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	08 95       	ret

00000aaa <__fp_nan>:
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	80 ec       	ldi	r24, 0xC0	; 192
 aae:	08 95       	ret

00000ab0 <__fp_pscA>:
 ab0:	00 24       	eor	r0, r0
 ab2:	0a 94       	dec	r0
 ab4:	16 16       	cp	r1, r22
 ab6:	17 06       	cpc	r1, r23
 ab8:	18 06       	cpc	r1, r24
 aba:	09 06       	cpc	r0, r25
 abc:	08 95       	ret

00000abe <__fp_pscB>:
 abe:	00 24       	eor	r0, r0
 ac0:	0a 94       	dec	r0
 ac2:	12 16       	cp	r1, r18
 ac4:	13 06       	cpc	r1, r19
 ac6:	14 06       	cpc	r1, r20
 ac8:	05 06       	cpc	r0, r21
 aca:	08 95       	ret

00000acc <__fp_round>:
 acc:	09 2e       	mov	r0, r25
 ace:	03 94       	inc	r0
 ad0:	00 0c       	add	r0, r0
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__fp_round+0xc>
 ad4:	88 23       	and	r24, r24
 ad6:	52 f0       	brmi	.+20     	; 0xaec <__fp_round+0x20>
 ad8:	bb 0f       	add	r27, r27
 ada:	40 f4       	brcc	.+16     	; 0xaec <__fp_round+0x20>
 adc:	bf 2b       	or	r27, r31
 ade:	11 f4       	brne	.+4      	; 0xae4 <__fp_round+0x18>
 ae0:	60 ff       	sbrs	r22, 0
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <__fp_round+0x20>
 ae4:	6f 5f       	subi	r22, 0xFF	; 255
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	08 95       	ret

00000aee <__fp_split3>:
 aee:	57 fd       	sbrc	r21, 7
 af0:	90 58       	subi	r25, 0x80	; 128
 af2:	44 0f       	add	r20, r20
 af4:	55 1f       	adc	r21, r21
 af6:	59 f0       	breq	.+22     	; 0xb0e <__fp_splitA+0x10>
 af8:	5f 3f       	cpi	r21, 0xFF	; 255
 afa:	71 f0       	breq	.+28     	; 0xb18 <__fp_splitA+0x1a>
 afc:	47 95       	ror	r20

00000afe <__fp_splitA>:
 afe:	88 0f       	add	r24, r24
 b00:	97 fb       	bst	r25, 7
 b02:	99 1f       	adc	r25, r25
 b04:	61 f0       	breq	.+24     	; 0xb1e <__fp_splitA+0x20>
 b06:	9f 3f       	cpi	r25, 0xFF	; 255
 b08:	79 f0       	breq	.+30     	; 0xb28 <__fp_splitA+0x2a>
 b0a:	87 95       	ror	r24
 b0c:	08 95       	ret
 b0e:	12 16       	cp	r1, r18
 b10:	13 06       	cpc	r1, r19
 b12:	14 06       	cpc	r1, r20
 b14:	55 1f       	adc	r21, r21
 b16:	f2 cf       	rjmp	.-28     	; 0xafc <__fp_split3+0xe>
 b18:	46 95       	lsr	r20
 b1a:	f1 df       	rcall	.-30     	; 0xafe <__fp_splitA>
 b1c:	08 c0       	rjmp	.+16     	; 0xb2e <__fp_splitA+0x30>
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	18 06       	cpc	r1, r24
 b24:	99 1f       	adc	r25, r25
 b26:	f1 cf       	rjmp	.-30     	; 0xb0a <__fp_splitA+0xc>
 b28:	86 95       	lsr	r24
 b2a:	71 05       	cpc	r23, r1
 b2c:	61 05       	cpc	r22, r1
 b2e:	08 94       	sec
 b30:	08 95       	ret

00000b32 <__fp_zero>:
 b32:	e8 94       	clt

00000b34 <__fp_szero>:
 b34:	bb 27       	eor	r27, r27
 b36:	66 27       	eor	r22, r22
 b38:	77 27       	eor	r23, r23
 b3a:	cb 01       	movw	r24, r22
 b3c:	97 f9       	bld	r25, 7
 b3e:	08 95       	ret

00000b40 <__gesf2>:
 b40:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_cmp>
 b44:	08 f4       	brcc	.+2      	; 0xb48 <__gesf2+0x8>
 b46:	8f ef       	ldi	r24, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__divmodsi4>:
 b4a:	05 2e       	mov	r0, r21
 b4c:	97 fb       	bst	r25, 7
 b4e:	1e f4       	brtc	.+6      	; 0xb56 <__divmodsi4+0xc>
 b50:	00 94       	com	r0
 b52:	0e 94 bc 05 	call	0xb78	; 0xb78 <__negsi2>
 b56:	57 fd       	sbrc	r21, 7
 b58:	07 d0       	rcall	.+14     	; 0xb68 <__divmodsi4_neg2>
 b5a:	0e 94 c4 05 	call	0xb88	; 0xb88 <__udivmodsi4>
 b5e:	07 fc       	sbrc	r0, 7
 b60:	03 d0       	rcall	.+6      	; 0xb68 <__divmodsi4_neg2>
 b62:	4e f4       	brtc	.+18     	; 0xb76 <__divmodsi4_exit>
 b64:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__negsi2>

00000b68 <__divmodsi4_neg2>:
 b68:	50 95       	com	r21
 b6a:	40 95       	com	r20
 b6c:	30 95       	com	r19
 b6e:	21 95       	neg	r18
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	4f 4f       	sbci	r20, 0xFF	; 255
 b74:	5f 4f       	sbci	r21, 0xFF	; 255

00000b76 <__divmodsi4_exit>:
 b76:	08 95       	ret

00000b78 <__negsi2>:
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__udivmodsi4>:
 b88:	a1 e2       	ldi	r26, 0x21	; 33
 b8a:	1a 2e       	mov	r1, r26
 b8c:	aa 1b       	sub	r26, r26
 b8e:	bb 1b       	sub	r27, r27
 b90:	fd 01       	movw	r30, r26
 b92:	0d c0       	rjmp	.+26     	; 0xbae <__udivmodsi4_ep>

00000b94 <__udivmodsi4_loop>:
 b94:	aa 1f       	adc	r26, r26
 b96:	bb 1f       	adc	r27, r27
 b98:	ee 1f       	adc	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	a2 17       	cp	r26, r18
 b9e:	b3 07       	cpc	r27, r19
 ba0:	e4 07       	cpc	r30, r20
 ba2:	f5 07       	cpc	r31, r21
 ba4:	20 f0       	brcs	.+8      	; 0xbae <__udivmodsi4_ep>
 ba6:	a2 1b       	sub	r26, r18
 ba8:	b3 0b       	sbc	r27, r19
 baa:	e4 0b       	sbc	r30, r20
 bac:	f5 0b       	sbc	r31, r21

00000bae <__udivmodsi4_ep>:
 bae:	66 1f       	adc	r22, r22
 bb0:	77 1f       	adc	r23, r23
 bb2:	88 1f       	adc	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	1a 94       	dec	r1
 bb8:	69 f7       	brne	.-38     	; 0xb94 <__udivmodsi4_loop>
 bba:	60 95       	com	r22
 bbc:	70 95       	com	r23
 bbe:	80 95       	com	r24
 bc0:	90 95       	com	r25
 bc2:	9b 01       	movw	r18, r22
 bc4:	ac 01       	movw	r20, r24
 bc6:	bd 01       	movw	r22, r26
 bc8:	cf 01       	movw	r24, r30
 bca:	08 95       	ret

00000bcc <_exit>:
 bcc:	f8 94       	cli

00000bce <__stop_program>:
 bce:	ff cf       	rjmp	.-2      	; 0xbce <__stop_program>
