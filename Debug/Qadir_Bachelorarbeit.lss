
Qadir_Bachelorarbeit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000638  000006cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010a  0080010a  000006d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd6  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000861  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000619  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9e:	0c 94 1a 03 	jmp	0x634	; 0x634 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init>:
	}
    return 0;
}
void Init(void) //Initialisiert die einzelnen Init Funktionen
{
	Timer0_Init();
  a6:	0e 94 4a 01 	call	0x294	; 0x294 <Timer0_Init>
	Timer1_Init();
  aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Timer1_Init>
  ae:	08 95       	ret

000000b0 <main>:
unsigned char ucFlagBlink_X = 0; // Variable für interrupt von Timer0 für jede 500ms 
unsigned char ucFlagBlink_Y = 0; // Variable für interrupt von Timer0 für jede 500ms 
unsigned char t = 100; // Eingabe der Zeit
int main(void)
{
	Init();//Initialiersierung
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <Init>
	// Umwandlung in Digitatl, in Schritten:
	my = ypos/(0.66)+1;
  b4:	23 ec       	ldi	r18, 0xC3	; 195
  b6:	35 ef       	ldi	r19, 0xF5	; 245
  b8:	48 e2       	ldi	r20, 0x28	; 40
  ba:	5f e3       	ldi	r21, 0x3F	; 63
  bc:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <ypos>
  c0:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <ypos+0x1>
  c4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ypos+0x2>
  c8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ypos+0x3>
  cc:	0e 94 21 02 	call	0x442	; 0x442 <__divsf3>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	40 e8       	ldi	r20, 0x80	; 128
  d6:	5f e3       	ldi	r21, 0x3F	; 63
  d8:	0e 94 b5 01 	call	0x36a	; 0x36a <__addsf3>
  dc:	0e 94 93 02 	call	0x526	; 0x526 <__fixsfsi>
  e0:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <my>
  e4:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <my+0x1>
  e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <my+0x2>
  ec:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <my+0x3>
	mx = -xpos/(0.66)+1;
  f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <xpos>
  f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <xpos+0x1>
  f8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <xpos+0x2>
  fc:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <xpos+0x3>
 100:	bc 01       	movw	r22, r24
 102:	cd 01       	movw	r24, r26
 104:	90 58       	subi	r25, 0x80	; 128
 106:	23 ec       	ldi	r18, 0xC3	; 195
 108:	35 ef       	ldi	r19, 0xF5	; 245
 10a:	48 e2       	ldi	r20, 0x28	; 40
 10c:	5f e3       	ldi	r21, 0x3F	; 63
 10e:	0e 94 21 02 	call	0x442	; 0x442 <__divsf3>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	5f e3       	ldi	r21, 0x3F	; 63
 11a:	0e 94 b5 01 	call	0x36a	; 0x36a <__addsf3>
 11e:	0e 94 93 02 	call	0x526	; 0x526 <__fixsfsi>
 122:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <mx>
 126:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <mx+0x1>
 12a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mx+0x2>
 12e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <mx+0x3>
	//float steps_p_mm = (turns_per_mm*steps_value)/(microstep);//Schritte pro mm 
	//float ziel = d * 10 *steps_p_mm;// Weg in Centimeter // Eingabe für die Motoren
	//======================================================================================//

    // setup dirPin and stepPin as output // Bitts werden gesetzt = 1
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	8c 66       	ori	r24, 0x6C	; 108
 136:	8a b9       	out	0x0a, r24	; 10
		//movingToX (mx);
		//movingToY (my);
		
	while(1){
		for (int i = 0; i < t; i++ )
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	a2 c0       	rjmp	.+324    	; 0x282 <main+0x1d2>
		{
			unsigned char z = t;	
			if (t > 0)
 13e:	88 23       	and	r24, r24
 140:	09 f4       	brne	.+2      	; 0x144 <main+0x94>
 142:	9d c0       	rjmp	.+314    	; 0x27e <main+0x1ce>
			{
				while (1) {
				z %=2;
 144:	81 70       	andi	r24, 0x01	; 1
				if (z == 0)
 146:	09 f0       	breq	.+2      	; 0x14a <main+0x9a>
 148:	4b c0       	rjmp	.+150    	; 0x1e0 <main+0x130>
				{
					t--;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					if (mx > 0)
 154:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mx>
 158:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <mx+0x1>
 15c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <mx+0x2>
 160:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <mx+0x3>
 164:	18 16       	cp	r1, r24
 166:	19 06       	cpc	r1, r25
 168:	1a 06       	cpc	r1, r26
 16a:	1b 06       	cpc	r1, r27
 16c:	dc f4       	brge	.+54     	; 0x1a4 <main+0xf4>
					{		
							mx--;
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	a1 09       	sbc	r26, r1
 172:	b1 09       	sbc	r27, r1
 174:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mx>
 178:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <mx+0x1>
 17c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <mx+0x2>
 180:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <mx+0x3>
							//send low pulse for clockwise direction
							PORTD &= ~dirPinX;
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	8b b9       	out	0x0b, r24	; 11
							//send 200 pulses to rotate One full cycle
							PORTD |= stepPinX;
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	8b b9       	out	0x0b, r24	; 11
							//_delay_ms(1);
							PORTD &= ~stepPinX;
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e9       	ldi	r24, 0x9F	; 159
 198:	9f e0       	ldi	r25, 0x0F	; 15
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0xea>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xf0>
 1a0:	00 00       	nop
 1a2:	1c c0       	rjmp	.+56     	; 0x1dc <main+0x12c>
							_delay_ms(1); //
							
					} else if (mx < 0)
 1a4:	bb 23       	and	r27, r27
 1a6:	d4 f4       	brge	.+52     	; 0x1dc <main+0x12c>
					{
						mx++;
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	a1 1d       	adc	r26, r1
 1ac:	b1 1d       	adc	r27, r1
 1ae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mx>
 1b2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <mx+0x1>
 1b6:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <mx+0x2>
 1ba:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <mx+0x3>
						//mx *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinX;
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinX;
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinX;
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	8f e9       	ldi	r24, 0x9F	; 159
 1d2:	9f e0       	ldi	r25, 0x0F	; 15
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x124>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x12a>
 1da:	00 00       	nop
						_delay_ms(1);
					}
					z= t;
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
					}
				if (z == 1)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <main+0x136>
 1e4:	af cf       	rjmp	.-162    	; 0x144 <main+0x94>
				{
					t--;
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	81 50       	subi	r24, 0x01	; 1
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					if(my > 0)
 1f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <my>
 1f4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <my+0x1>
 1f8:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <my+0x2>
 1fc:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <my+0x3>
 200:	18 16       	cp	r1, r24
 202:	19 06       	cpc	r1, r25
 204:	1a 06       	cpc	r1, r26
 206:	1b 06       	cpc	r1, r27
 208:	dc f4       	brge	.+54     	; 0x240 <main+0x190>
					{
						my--;
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	a1 09       	sbc	r26, r1
 20e:	b1 09       	sbc	r27, r1
 210:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <my>
 214:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <my+0x1>
 218:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <my+0x2>
 21c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <my+0x3>
						PORTD &= ~dirPinY;
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	8f 7b       	andi	r24, 0xBF	; 191
 224:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	87 7f       	andi	r24, 0xF7	; 247
 230:	8b b9       	out	0x0b, r24	; 11
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x186>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x18c>
 23c:	00 00       	nop
 23e:	1c c0       	rjmp	.+56     	; 0x278 <main+0x1c8>
						_delay_ms(1);
					} else if (my < 0)
 240:	bb 23       	and	r27, r27
 242:	d4 f4       	brge	.+52     	; 0x278 <main+0x1c8>
					{
						my++;
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	a1 1d       	adc	r26, r1
 248:	b1 1d       	adc	r27, r1
 24a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <my>
 24e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <my+0x1>
 252:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <my+0x2>
 256:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <my+0x3>
						//my *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinY;
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	88 60       	ori	r24, 0x08	; 8
 264:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x1c0>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x1c6>
 276:	00 00       	nop
						_delay_ms(1);
					}
					z= t;
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27c:	63 cf       	rjmp	.-314    	; 0x144 <main+0x94>
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
		//movingToX (mx);
		//movingToY (my);
		
	while(1){
		for (int i = 0; i < t; i++ )
 27e:	2f 5f       	subi	r18, 0xFF	; 255
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 286:	48 2f       	mov	r20, r24
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	24 17       	cp	r18, r20
 28c:	35 07       	cpc	r19, r21
 28e:	0c f4       	brge	.+2      	; 0x292 <main+0x1e2>
 290:	56 cf       	rjmp	.-340    	; 0x13e <main+0x8e>
 292:	52 cf       	rjmp	.-348    	; 0x138 <main+0x88>

00000294 <Timer0_Init>:
	{
		ucFlag500ms = 0;
		return TIMER_TRIGGERED;
	}
	return TIMER_RUNNING;
}
 294:	84 b5       	in	r24, 0x24	; 36
 296:	82 60       	ori	r24, 0x02	; 2
 298:	84 bd       	out	0x24, r24	; 36
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	85 60       	ori	r24, 0x05	; 5
 29e:	85 bd       	out	0x25, r24	; 37
 2a0:	8c e9       	ldi	r24, 0x9C	; 156
 2a2:	87 bd       	out	0x27, r24	; 39
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2aa:	78 94       	sei
 2ac:	08 95       	ret

000002ae <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
	ucFlag10ms = 1;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ucFlag10ms>
	ucCnt100ms++;
 2c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ucCnt100ms>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ucCnt100ms>
	if(ucCnt100ms == 10)
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	89 f4       	brne	.+34     	; 0x2f0 <__vector_14+0x42>
	{//100ms sind vergangen
		ucCnt100ms = 0;
 2ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ucCnt100ms>
		ucFLag100ms = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ucFLag100ms>
		ucCnt500ms++;
 2d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if (ucCnt500ms==5)
 2e2:	85 30       	cpi	r24, 0x05	; 5
 2e4:	29 f4       	brne	.+10     	; 0x2f0 <__vector_14+0x42>
		{
			ucCnt500ms=0;
 2e6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			ucFlag500ms=1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ucFlag500ms>
		}
	}
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <Timer1_Init>:
	{
		ucFlagT1_1000ms = 0;
		return TIMER1_TRIGGERED;
	}
	return TIMER1_RUNNING;
}
 2fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 306:	2c e9       	ldi	r18, 0x9C	; 156
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 30e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 312:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 316:	78 94       	sei
 318:	08 95       	ret

0000031a <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	8f 93       	push	r24
	ucFlagT1_10ms = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ucFlagT1_10ms>
	ucCntT1_10ms++;		// wird jede 10 ms inkrementiert
 32c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ucCntT1_10ms>
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ucCntT1_10ms>
	if(ucCntT1_10ms == 10)
 336:	8a 30       	cpi	r24, 0x0A	; 10
 338:	89 f4       	brne	.+34     	; 0x35c <__vector_11+0x42>
	// disen kannst du verändern um zb. 1s zu erhalten mal 10
	// und dann sagst du einfach ucFlag1000ms =1 weil es dann erfüllt ist!!!
	{//100ms sind vergangen
		ucCntT1_10ms = 0;
 33a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ucCntT1_10ms>
		ucFlagT1_100ms = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ucFlagT1_100ms>
		
		// will man z.B. für 1 Sekunde aber die Funktion müssen wir dann in der main
		// wie die andren Funktionen dann Programmieren :)
		ucCntT1_100ms++;
 344:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ucCntT1_100ms>
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ucCntT1_100ms>
		if (ucCntT1_100ms==10)
 34e:	8a 30       	cpi	r24, 0x0A	; 10
 350:	29 f4       	brne	.+10     	; 0x35c <__vector_11+0x42>
		{
			ucCntT1_100ms=0;
 352:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ucCntT1_100ms>
			ucFlagT1_1000ms=1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ucFlagT1_1000ms>
		}
	}
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__subsf3>:
 368:	50 58       	subi	r21, 0x80	; 128

0000036a <__addsf3>:
 36a:	bb 27       	eor	r27, r27
 36c:	aa 27       	eor	r26, r26
 36e:	0e 94 cc 01 	call	0x398	; 0x398 <__addsf3x>
 372:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_round>
 376:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscA>
 37a:	38 f0       	brcs	.+14     	; 0x38a <__addsf3+0x20>
 37c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscB>
 380:	20 f0       	brcs	.+8      	; 0x38a <__addsf3+0x20>
 382:	39 f4       	brne	.+14     	; 0x392 <__addsf3+0x28>
 384:	9f 3f       	cpi	r25, 0xFF	; 255
 386:	19 f4       	brne	.+6      	; 0x38e <__addsf3+0x24>
 388:	26 f4       	brtc	.+8      	; 0x392 <__addsf3+0x28>
 38a:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_nan>
 38e:	0e f4       	brtc	.+2      	; 0x392 <__addsf3+0x28>
 390:	e0 95       	com	r30
 392:	e7 fb       	bst	r30, 7
 394:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_inf>

00000398 <__addsf3x>:
 398:	e9 2f       	mov	r30, r25
 39a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fp_split3>
 39e:	58 f3       	brcs	.-42     	; 0x376 <__addsf3+0xc>
 3a0:	ba 17       	cp	r27, r26
 3a2:	62 07       	cpc	r22, r18
 3a4:	73 07       	cpc	r23, r19
 3a6:	84 07       	cpc	r24, r20
 3a8:	95 07       	cpc	r25, r21
 3aa:	20 f0       	brcs	.+8      	; 0x3b4 <__addsf3x+0x1c>
 3ac:	79 f4       	brne	.+30     	; 0x3cc <__addsf3x+0x34>
 3ae:	a6 f5       	brtc	.+104    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3b0:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_zero>
 3b4:	0e f4       	brtc	.+2      	; 0x3b8 <__addsf3x+0x20>
 3b6:	e0 95       	com	r30
 3b8:	0b 2e       	mov	r0, r27
 3ba:	ba 2f       	mov	r27, r26
 3bc:	a0 2d       	mov	r26, r0
 3be:	0b 01       	movw	r0, r22
 3c0:	b9 01       	movw	r22, r18
 3c2:	90 01       	movw	r18, r0
 3c4:	0c 01       	movw	r0, r24
 3c6:	ca 01       	movw	r24, r20
 3c8:	a0 01       	movw	r20, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	ff 27       	eor	r31, r31
 3ce:	59 1b       	sub	r21, r25
 3d0:	99 f0       	breq	.+38     	; 0x3f8 <__addsf3x+0x60>
 3d2:	59 3f       	cpi	r21, 0xF9	; 249
 3d4:	50 f4       	brcc	.+20     	; 0x3ea <__addsf3x+0x52>
 3d6:	50 3e       	cpi	r21, 0xE0	; 224
 3d8:	68 f1       	brcs	.+90     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3da:	1a 16       	cp	r1, r26
 3dc:	f0 40       	sbci	r31, 0x00	; 0
 3de:	a2 2f       	mov	r26, r18
 3e0:	23 2f       	mov	r18, r19
 3e2:	34 2f       	mov	r19, r20
 3e4:	44 27       	eor	r20, r20
 3e6:	58 5f       	subi	r21, 0xF8	; 248
 3e8:	f3 cf       	rjmp	.-26     	; 0x3d0 <__addsf3x+0x38>
 3ea:	46 95       	lsr	r20
 3ec:	37 95       	ror	r19
 3ee:	27 95       	ror	r18
 3f0:	a7 95       	ror	r26
 3f2:	f0 40       	sbci	r31, 0x00	; 0
 3f4:	53 95       	inc	r21
 3f6:	c9 f7       	brne	.-14     	; 0x3ea <__addsf3x+0x52>
 3f8:	7e f4       	brtc	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3fa:	1f 16       	cp	r1, r31
 3fc:	ba 0b       	sbc	r27, r26
 3fe:	62 0b       	sbc	r22, r18
 400:	73 0b       	sbc	r23, r19
 402:	84 0b       	sbc	r24, r20
 404:	ba f0       	brmi	.+46     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 406:	91 50       	subi	r25, 0x01	; 1
 408:	a1 f0       	breq	.+40     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 40a:	ff 0f       	add	r31, r31
 40c:	bb 1f       	adc	r27, r27
 40e:	66 1f       	adc	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	88 1f       	adc	r24, r24
 414:	c2 f7       	brpl	.-16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 416:	0e c0       	rjmp	.+28     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 418:	ba 0f       	add	r27, r26
 41a:	62 1f       	adc	r22, r18
 41c:	73 1f       	adc	r23, r19
 41e:	84 1f       	adc	r24, r20
 420:	48 f4       	brcc	.+18     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 422:	87 95       	ror	r24
 424:	77 95       	ror	r23
 426:	67 95       	ror	r22
 428:	b7 95       	ror	r27
 42a:	f7 95       	ror	r31
 42c:	9e 3f       	cpi	r25, 0xFE	; 254
 42e:	08 f0       	brcs	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 430:	b0 cf       	rjmp	.-160    	; 0x392 <__addsf3+0x28>
 432:	93 95       	inc	r25
 434:	88 0f       	add	r24, r24
 436:	08 f0       	brcs	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	99 27       	eor	r25, r25
 43a:	ee 0f       	add	r30, r30
 43c:	97 95       	ror	r25
 43e:	87 95       	ror	r24
 440:	08 95       	ret

00000442 <__divsf3>:
 442:	0e 94 35 02 	call	0x46a	; 0x46a <__divsf3x>
 446:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_round>
 44a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscB>
 44e:	58 f0       	brcs	.+22     	; 0x466 <__divsf3+0x24>
 450:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscA>
 454:	40 f0       	brcs	.+16     	; 0x466 <__divsf3+0x24>
 456:	29 f4       	brne	.+10     	; 0x462 <__divsf3+0x20>
 458:	5f 3f       	cpi	r21, 0xFF	; 255
 45a:	29 f0       	breq	.+10     	; 0x466 <__divsf3+0x24>
 45c:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_inf>
 460:	51 11       	cpse	r21, r1
 462:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_szero>
 466:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_nan>

0000046a <__divsf3x>:
 46a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fp_split3>
 46e:	68 f3       	brcs	.-38     	; 0x44a <__divsf3+0x8>

00000470 <__divsf3_pse>:
 470:	99 23       	and	r25, r25
 472:	b1 f3       	breq	.-20     	; 0x460 <__divsf3+0x1e>
 474:	55 23       	and	r21, r21
 476:	91 f3       	breq	.-28     	; 0x45c <__divsf3+0x1a>
 478:	95 1b       	sub	r25, r21
 47a:	55 0b       	sbc	r21, r21
 47c:	bb 27       	eor	r27, r27
 47e:	aa 27       	eor	r26, r26
 480:	62 17       	cp	r22, r18
 482:	73 07       	cpc	r23, r19
 484:	84 07       	cpc	r24, r20
 486:	38 f0       	brcs	.+14     	; 0x496 <__divsf3_pse+0x26>
 488:	9f 5f       	subi	r25, 0xFF	; 255
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	44 1f       	adc	r20, r20
 492:	aa 1f       	adc	r26, r26
 494:	a9 f3       	breq	.-22     	; 0x480 <__divsf3_pse+0x10>
 496:	35 d0       	rcall	.+106    	; 0x502 <__divsf3_pse+0x92>
 498:	0e 2e       	mov	r0, r30
 49a:	3a f0       	brmi	.+14     	; 0x4aa <__divsf3_pse+0x3a>
 49c:	e0 e8       	ldi	r30, 0x80	; 128
 49e:	32 d0       	rcall	.+100    	; 0x504 <__divsf3_pse+0x94>
 4a0:	91 50       	subi	r25, 0x01	; 1
 4a2:	50 40       	sbci	r21, 0x00	; 0
 4a4:	e6 95       	lsr	r30
 4a6:	00 1c       	adc	r0, r0
 4a8:	ca f7       	brpl	.-14     	; 0x49c <__divsf3_pse+0x2c>
 4aa:	2b d0       	rcall	.+86     	; 0x502 <__divsf3_pse+0x92>
 4ac:	fe 2f       	mov	r31, r30
 4ae:	29 d0       	rcall	.+82     	; 0x502 <__divsf3_pse+0x92>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	bb 1f       	adc	r27, r27
 4b8:	26 17       	cp	r18, r22
 4ba:	37 07       	cpc	r19, r23
 4bc:	48 07       	cpc	r20, r24
 4be:	ab 07       	cpc	r26, r27
 4c0:	b0 e8       	ldi	r27, 0x80	; 128
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__divsf3_pse+0x56>
 4c4:	bb 0b       	sbc	r27, r27
 4c6:	80 2d       	mov	r24, r0
 4c8:	bf 01       	movw	r22, r30
 4ca:	ff 27       	eor	r31, r31
 4cc:	93 58       	subi	r25, 0x83	; 131
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	3a f0       	brmi	.+14     	; 0x4e0 <__divsf3_pse+0x70>
 4d2:	9e 3f       	cpi	r25, 0xFE	; 254
 4d4:	51 05       	cpc	r21, r1
 4d6:	78 f0       	brcs	.+30     	; 0x4f6 <__divsf3_pse+0x86>
 4d8:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_inf>
 4dc:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_szero>
 4e0:	5f 3f       	cpi	r21, 0xFF	; 255
 4e2:	e4 f3       	brlt	.-8      	; 0x4dc <__divsf3_pse+0x6c>
 4e4:	98 3e       	cpi	r25, 0xE8	; 232
 4e6:	d4 f3       	brlt	.-12     	; 0x4dc <__divsf3_pse+0x6c>
 4e8:	86 95       	lsr	r24
 4ea:	77 95       	ror	r23
 4ec:	67 95       	ror	r22
 4ee:	b7 95       	ror	r27
 4f0:	f7 95       	ror	r31
 4f2:	9f 5f       	subi	r25, 0xFF	; 255
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <__divsf3_pse+0x78>
 4f6:	88 0f       	add	r24, r24
 4f8:	91 1d       	adc	r25, r1
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	97 f9       	bld	r25, 7
 500:	08 95       	ret
 502:	e1 e0       	ldi	r30, 0x01	; 1
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	bb 1f       	adc	r27, r27
 50c:	62 17       	cp	r22, r18
 50e:	73 07       	cpc	r23, r19
 510:	84 07       	cpc	r24, r20
 512:	ba 07       	cpc	r27, r26
 514:	20 f0       	brcs	.+8      	; 0x51e <__divsf3_pse+0xae>
 516:	62 1b       	sub	r22, r18
 518:	73 0b       	sbc	r23, r19
 51a:	84 0b       	sbc	r24, r20
 51c:	ba 0b       	sbc	r27, r26
 51e:	ee 1f       	adc	r30, r30
 520:	88 f7       	brcc	.-30     	; 0x504 <__divsf3_pse+0x94>
 522:	e0 95       	com	r30
 524:	08 95       	ret

00000526 <__fixsfsi>:
 526:	0e 94 9a 02 	call	0x534	; 0x534 <__fixunssfsi>
 52a:	68 94       	set
 52c:	b1 11       	cpse	r27, r1
 52e:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_szero>
 532:	08 95       	ret

00000534 <__fixunssfsi>:
 534:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_splitA>
 538:	88 f0       	brcs	.+34     	; 0x55c <__fixunssfsi+0x28>
 53a:	9f 57       	subi	r25, 0x7F	; 127
 53c:	98 f0       	brcs	.+38     	; 0x564 <__fixunssfsi+0x30>
 53e:	b9 2f       	mov	r27, r25
 540:	99 27       	eor	r25, r25
 542:	b7 51       	subi	r27, 0x17	; 23
 544:	b0 f0       	brcs	.+44     	; 0x572 <__fixunssfsi+0x3e>
 546:	e1 f0       	breq	.+56     	; 0x580 <__fixunssfsi+0x4c>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	1a f0       	brmi	.+6      	; 0x558 <__fixunssfsi+0x24>
 552:	ba 95       	dec	r27
 554:	c9 f7       	brne	.-14     	; 0x548 <__fixunssfsi+0x14>
 556:	14 c0       	rjmp	.+40     	; 0x580 <__fixunssfsi+0x4c>
 558:	b1 30       	cpi	r27, 0x01	; 1
 55a:	91 f0       	breq	.+36     	; 0x580 <__fixunssfsi+0x4c>
 55c:	0e 94 13 03 	call	0x626	; 0x626 <__fp_zero>
 560:	b1 e0       	ldi	r27, 0x01	; 1
 562:	08 95       	ret
 564:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_zero>
 568:	67 2f       	mov	r22, r23
 56a:	78 2f       	mov	r23, r24
 56c:	88 27       	eor	r24, r24
 56e:	b8 5f       	subi	r27, 0xF8	; 248
 570:	39 f0       	breq	.+14     	; 0x580 <__fixunssfsi+0x4c>
 572:	b9 3f       	cpi	r27, 0xF9	; 249
 574:	cc f3       	brlt	.-14     	; 0x568 <__fixunssfsi+0x34>
 576:	86 95       	lsr	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b3 95       	inc	r27
 57e:	d9 f7       	brne	.-10     	; 0x576 <__fixunssfsi+0x42>
 580:	3e f4       	brtc	.+14     	; 0x590 <__fixunssfsi+0x5c>
 582:	90 95       	com	r25
 584:	80 95       	com	r24
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	08 95       	ret

00000592 <__fp_inf>:
 592:	97 f9       	bld	r25, 7
 594:	9f 67       	ori	r25, 0x7F	; 127
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	08 95       	ret

0000059e <__fp_nan>:
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	80 ec       	ldi	r24, 0xC0	; 192
 5a2:	08 95       	ret

000005a4 <__fp_pscA>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	16 16       	cp	r1, r22
 5aa:	17 06       	cpc	r1, r23
 5ac:	18 06       	cpc	r1, r24
 5ae:	09 06       	cpc	r0, r25
 5b0:	08 95       	ret

000005b2 <__fp_pscB>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	12 16       	cp	r1, r18
 5b8:	13 06       	cpc	r1, r19
 5ba:	14 06       	cpc	r1, r20
 5bc:	05 06       	cpc	r0, r21
 5be:	08 95       	ret

000005c0 <__fp_round>:
 5c0:	09 2e       	mov	r0, r25
 5c2:	03 94       	inc	r0
 5c4:	00 0c       	add	r0, r0
 5c6:	11 f4       	brne	.+4      	; 0x5cc <__fp_round+0xc>
 5c8:	88 23       	and	r24, r24
 5ca:	52 f0       	brmi	.+20     	; 0x5e0 <__fp_round+0x20>
 5cc:	bb 0f       	add	r27, r27
 5ce:	40 f4       	brcc	.+16     	; 0x5e0 <__fp_round+0x20>
 5d0:	bf 2b       	or	r27, r31
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__fp_round+0x18>
 5d4:	60 ff       	sbrs	r22, 0
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__fp_round+0x20>
 5d8:	6f 5f       	subi	r22, 0xFF	; 255
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__fp_split3>:
 5e2:	57 fd       	sbrc	r21, 7
 5e4:	90 58       	subi	r25, 0x80	; 128
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	59 f0       	breq	.+22     	; 0x602 <__fp_splitA+0x10>
 5ec:	5f 3f       	cpi	r21, 0xFF	; 255
 5ee:	71 f0       	breq	.+28     	; 0x60c <__fp_splitA+0x1a>
 5f0:	47 95       	ror	r20

000005f2 <__fp_splitA>:
 5f2:	88 0f       	add	r24, r24
 5f4:	97 fb       	bst	r25, 7
 5f6:	99 1f       	adc	r25, r25
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_splitA+0x20>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	79 f0       	breq	.+30     	; 0x61c <__fp_splitA+0x2a>
 5fe:	87 95       	ror	r24
 600:	08 95       	ret
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	14 06       	cpc	r1, r20
 608:	55 1f       	adc	r21, r21
 60a:	f2 cf       	rjmp	.-28     	; 0x5f0 <__fp_split3+0xe>
 60c:	46 95       	lsr	r20
 60e:	f1 df       	rcall	.-30     	; 0x5f2 <__fp_splitA>
 610:	08 c0       	rjmp	.+16     	; 0x622 <__fp_splitA+0x30>
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	99 1f       	adc	r25, r25
 61a:	f1 cf       	rjmp	.-30     	; 0x5fe <__fp_splitA+0xc>
 61c:	86 95       	lsr	r24
 61e:	71 05       	cpc	r23, r1
 620:	61 05       	cpc	r22, r1
 622:	08 94       	sec
 624:	08 95       	ret

00000626 <__fp_zero>:
 626:	e8 94       	clt

00000628 <__fp_szero>:
 628:	bb 27       	eor	r27, r27
 62a:	66 27       	eor	r22, r22
 62c:	77 27       	eor	r23, r23
 62e:	cb 01       	movw	r24, r22
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <_exit>:
 634:	f8 94       	cli

00000636 <__stop_program>:
 636:	ff cf       	rjmp	.-2      	; 0x636 <__stop_program>
