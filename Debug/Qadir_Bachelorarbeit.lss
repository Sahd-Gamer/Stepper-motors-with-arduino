
Qadir_Bachelorarbeit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007c2  00000856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010c  0080010c  00000862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec5  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000910  00000000  00000000  00002166  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005aa  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c0  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9e:	0c 94 df 03 	jmp	0x7be	; 0x7be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init>:
}


void Init(void) //Initialisiert die einzelnen Init Funktionen
{
	Timer0_Init();
  a6:	0e 94 a4 01 	call	0x348	; 0x348 <Timer0_Init>
	Timer1_Init();
  aa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Timer1_Init>
  ae:	08 95       	ret

000000b0 <main>:
unsigned char ucFlagBlink_Y = 0; // Variable für interrupt von Timer0 für jede 500ms 


int main(void)
{
	Init();//Initialiersierung
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <Init>
	// Umwandlung in Digitatl, in Schritten:
	mx = xpos/(0.66);
  b4:	23 ec       	ldi	r18, 0xC3	; 195
  b6:	35 ef       	ldi	r19, 0xF5	; 245
  b8:	48 e2       	ldi	r20, 0x28	; 40
  ba:	5f e3       	ldi	r21, 0x3F	; 63
  bc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <xpos>
  c0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <xpos+0x1>
  c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <xpos+0x2>
  c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <xpos+0x3>
  cc:	0e 94 80 02 	call	0x500	; 0x500 <__divsf3>
  d0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fixsfsi>
	mx +=1;
  d4:	dc 01       	movw	r26, r24
  d6:	cb 01       	movw	r24, r22
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mx>
  e2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <mx+0x1>
  e6:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <mx+0x2>
  ea:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <mx+0x3>
	my = ypos/(0.66);
  ee:	23 ec       	ldi	r18, 0xC3	; 195
  f0:	35 ef       	ldi	r19, 0xF5	; 245
  f2:	48 e2       	ldi	r20, 0x28	; 40
  f4:	5f e3       	ldi	r21, 0x3F	; 63
  f6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <ypos>
  fa:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <ypos+0x1>
  fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ypos+0x2>
 102:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ypos+0x3>
 106:	0e 94 80 02 	call	0x500	; 0x500 <__divsf3>
 10a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fixsfsi>
	my +=1;
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	a1 1d       	adc	r26, r1
 116:	b1 1d       	adc	r27, r1
 118:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <my>
 11c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <my+0x1>
 120:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <my+0x2>
 124:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <my+0x3>
	//float steps_p_mm = (turns_per_mm*steps_value)/(microstep);//Schritte pro mm 
	//float ziel = d * 10 *steps_p_mm;// Weg in Centimeter // Eingabe für die Motoren
	//======================================================================================//

    // setup dirPin and stepPin as output // Bitts werden gesetzt = 1
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	8c 66       	ori	r24, 0x6C	; 108
 12c:	8a b9       	out	0x0a, r24	; 10
		//movingToX (mx);
		//movingToY (my);
		
	while(1){
		for (int i = 0; i < t; i++ )
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	f3 c0       	rjmp	.+486    	; 0x31a <main+0x26a>
		{
			unsigned char z = t;	
 134:	c7 01       	movw	r24, r14
 136:	b6 01       	movw	r22, r12
 138:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixunssfsi>
 13c:	c6 2f       	mov	r28, r22
			if (t > 0)
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	a9 01       	movw	r20, r18
 144:	c7 01       	movw	r24, r14
 146:	b6 01       	movw	r22, r12
 148:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__gesf2>
 14c:	18 16       	cp	r1, r24
 14e:	0c f0       	brlt	.+2      	; 0x152 <main+0xa2>
 150:	e2 c0       	rjmp	.+452    	; 0x316 <main+0x266>
			{
				while (1) {
				z %=2;
 152:	c1 70       	andi	r28, 0x01	; 1
				if (z == 0)
 154:	09 f0       	breq	.+2      	; 0x158 <main+0xa8>
 156:	76 c0       	rjmp	.+236    	; 0x244 <main+0x194>
				{
					t--;
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e8       	ldi	r20, 0x80	; 128
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 170:	0e 94 0e 02 	call	0x41c	; 0x41c <__subsf3>
 174:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 180:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					if (mx > 0)
 184:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mx>
 188:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <mx+0x1>
 18c:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <mx+0x2>
 190:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <mx+0x3>
 194:	18 16       	cp	r1, r24
 196:	19 06       	cpc	r1, r25
 198:	1a 06       	cpc	r1, r26
 19a:	1b 06       	cpc	r1, r27
 19c:	34 f1       	brlt	.+76     	; 0x1ea <main+0x13a>
 19e:	2b c0       	rjmp	.+86     	; 0x1f6 <main+0x146>
					{		
						for (int i = 0; i < 2; i++)
						{
							mx--;
 1a0:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <mx>
 1a4:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <mx+0x1>
 1a8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <mx+0x2>
 1ac:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <mx+0x3>
 1b0:	41 50       	subi	r20, 0x01	; 1
 1b2:	51 09       	sbc	r21, r1
 1b4:	61 09       	sbc	r22, r1
 1b6:	71 09       	sbc	r23, r1
 1b8:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <mx>
 1bc:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <mx+0x1>
 1c0:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <mx+0x2>
 1c4:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <mx+0x3>
							//send low pulse for clockwise direction
							PORTD &= ~dirPinX;
 1c8:	2b b1       	in	r18, 0x0b	; 11
 1ca:	2f 7d       	andi	r18, 0xDF	; 223
 1cc:	2b b9       	out	0x0b, r18	; 11
							//send 200 pulses to rotate One full cycle
							PORTD |= stepPinX;
 1ce:	2b b1       	in	r18, 0x0b	; 11
 1d0:	24 60       	ori	r18, 0x04	; 4
 1d2:	2b b9       	out	0x0b, r18	; 11
							//_delay_ms(1);
							PORTD &= ~stepPinX;
 1d4:	2b b1       	in	r18, 0x0b	; 11
 1d6:	2b 7f       	andi	r18, 0xFB	; 251
 1d8:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	ef e0       	ldi	r30, 0x0F	; 15
 1dc:	f7 e2       	ldi	r31, 0x27	; 39
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x12e>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x134>
 1e4:	00 00       	nop
				if (z == 0)
				{
					t--;
					if (mx > 0)
					{		
						for (int i = 0; i < 2; i++)
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <main+0x13e>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	91 05       	cpc	r25, r1
 1f2:	b4 f2       	brlt	.-84     	; 0x1a0 <main+0xf0>
 1f4:	1c c0       	rjmp	.+56     	; 0x22e <main+0x17e>
							PORTD &= ~stepPinX;
							_delay_ms(2.5); //
						}
							
							
					} else if (mx < 0)
 1f6:	bb 23       	and	r27, r27
 1f8:	d4 f4       	brge	.+52     	; 0x22e <main+0x17e>
					{
						mx++;
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	a1 1d       	adc	r26, r1
 1fe:	b1 1d       	adc	r27, r1
 200:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mx>
 204:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <mx+0x1>
 208:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <mx+0x2>
 20c:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <mx+0x3>
						//mx *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinX;
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	80 62       	ori	r24, 0x20	; 32
 214:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinX;
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinX;
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	8b b9       	out	0x0b, r24	; 11
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	97 e2       	ldi	r25, 0x27	; 39
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x176>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x17c>
 22c:	00 00       	nop
						_delay_ms(2.5);
					}
					z= t;
 22e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 236:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 23a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 23e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixunssfsi>
 242:	c6 2f       	mov	r28, r22
					}
				if (z == 1)
 244:	c1 30       	cpi	r28, 0x01	; 1
 246:	09 f0       	breq	.+2      	; 0x24a <main+0x19a>
 248:	84 cf       	rjmp	.-248    	; 0x152 <main+0xa2>
				{
					t--;
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 256:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 25e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 262:	0e 94 0e 02 	call	0x41c	; 0x41c <__subsf3>
 266:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 26a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					if(my > 0)
 276:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <my>
 27a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <my+0x1>
 27e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <my+0x2>
 282:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <my+0x3>
 286:	18 16       	cp	r1, r24
 288:	19 06       	cpc	r1, r25
 28a:	1a 06       	cpc	r1, r26
 28c:	1b 06       	cpc	r1, r27
 28e:	dc f4       	brge	.+54     	; 0x2c6 <main+0x216>
					{
						my--;
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	a1 09       	sbc	r26, r1
 294:	b1 09       	sbc	r27, r1
 296:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <my>
 29a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <my+0x1>
 29e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <my+0x2>
 2a2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <my+0x3>
						PORTD &= ~dirPinY;
 2a6:	8b b1       	in	r24, 0x0b	; 11
 2a8:	8f 7b       	andi	r24, 0xBF	; 191
 2aa:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	8b b9       	out	0x0b, r24	; 11
 2b8:	ef e1       	ldi	r30, 0x1F	; 31
 2ba:	fe e4       	ldi	r31, 0x4E	; 78
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x20c>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x212>
 2c2:	00 00       	nop
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <main+0x24e>
						_delay_ms(5);
					} else if (my < 0)
 2c6:	bb 23       	and	r27, r27
 2c8:	d4 f4       	brge	.+52     	; 0x2fe <main+0x24e>
					{
						my++;
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	a1 1d       	adc	r26, r1
 2ce:	b1 1d       	adc	r27, r1
 2d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <my>
 2d4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <my+0x1>
 2d8:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <my+0x2>
 2dc:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <my+0x3>
						//my *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinY;
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	8f e1       	ldi	r24, 0x1F	; 31
 2f4:	9e e4       	ldi	r25, 0x4E	; 78
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x246>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x24c>
 2fc:	00 00       	nop
						_delay_ms(5);
					}
					z= t;
 2fe:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 302:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 306:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 30a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 30e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixunssfsi>
 312:	c6 2f       	mov	r28, r22
 314:	1e cf       	rjmp	.-452    	; 0x152 <main+0xa2>
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
		//movingToX (mx);
		//movingToY (my);
		
	while(1){
		for (int i = 0; i < t; i++ )
 316:	0f 5f       	subi	r16, 0xFF	; 255
 318:	1f 4f       	sbci	r17, 0xFF	; 255
 31a:	b8 01       	movw	r22, r16
 31c:	01 2e       	mov	r0, r17
 31e:	00 0c       	add	r0, r0
 320:	88 0b       	sbc	r24, r24
 322:	99 0b       	sbc	r25, r25
 324:	0e 94 2a 03 	call	0x654	; 0x654 <__floatsisf>
 328:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 32c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 330:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 334:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 338:	a7 01       	movw	r20, r14
 33a:	96 01       	movw	r18, r12
 33c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__cmpsf2>
 340:	88 23       	and	r24, r24
 342:	0c f4       	brge	.+2      	; 0x346 <main+0x296>
 344:	f7 ce       	rjmp	.-530    	; 0x134 <main+0x84>
 346:	f3 ce       	rjmp	.-538    	; 0x12e <main+0x7e>

00000348 <Timer0_Init>:
	{
		ucFlag500ms = 0;
		return TIMER_TRIGGERED;
	}
	return TIMER_RUNNING;
}
 348:	84 b5       	in	r24, 0x24	; 36
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	84 bd       	out	0x24, r24	; 36
 34e:	85 b5       	in	r24, 0x25	; 37
 350:	85 60       	ori	r24, 0x05	; 5
 352:	85 bd       	out	0x25, r24	; 37
 354:	8c e9       	ldi	r24, 0x9C	; 156
 356:	87 bd       	out	0x27, r24	; 39
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 35e:	78 94       	sei
 360:	08 95       	ret

00000362 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	8f 93       	push	r24
	ucFlag10ms = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ucFlag10ms>
	ucCnt100ms++;
 374:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ucCnt100ms>
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ucCnt100ms>
	if(ucCnt100ms == 10)
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	89 f4       	brne	.+34     	; 0x3a4 <__vector_14+0x42>
	{//100ms sind vergangen
		ucCnt100ms = 0;
 382:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ucCnt100ms>
		ucFLag100ms = 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ucFLag100ms>
		ucCnt500ms++;
 38c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if (ucCnt500ms==5)
 396:	85 30       	cpi	r24, 0x05	; 5
 398:	29 f4       	brne	.+10     	; 0x3a4 <__vector_14+0x42>
		{
			ucCnt500ms=0;
 39a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			ucFlag500ms=1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ucFlag500ms>
		}
	}
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <Timer1_Init>:
	{
		ucFlagT1_1000ms = 0;
		return TIMER1_TRIGGERED;
	}
	return TIMER1_RUNNING;
}
 3b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 3ba:	2c e9       	ldi	r18, 0x9C	; 156
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 3ca:	78 94       	sei
 3cc:	08 95       	ret

000003ce <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	8f 93       	push	r24
	ucFlagT1_10ms = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ucFlagT1_10ms>
	ucCntT1_10ms++;		// wird jede 10 ms inkrementiert
 3e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ucCntT1_10ms>
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ucCntT1_10ms>
	if(ucCntT1_10ms == 10)
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	89 f4       	brne	.+34     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	// disen kannst du verändern um zb. 1s zu erhalten mal 10
	// und dann sagst du einfach ucFlag1000ms =1 weil es dann erfüllt ist!!!
	{//100ms sind vergangen
		ucCntT1_10ms = 0;
 3ee:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ucCntT1_10ms>
		ucFlagT1_100ms = 1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ucFlagT1_100ms>
		
		// will man z.B. für 1 Sekunde aber die Funktion müssen wir dann in der main
		// wie die andren Funktionen dann Programmieren :)
		ucCntT1_100ms++;
 3f8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ucCntT1_100ms>
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ucCntT1_100ms>
		if (ucCntT1_100ms==10)
 402:	8a 30       	cpi	r24, 0x0A	; 10
 404:	29 f4       	brne	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		{
			ucCntT1_100ms=0;
 406:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ucCntT1_100ms>
			ucFlagT1_1000ms=1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ucFlagT1_1000ms>
		}
	}
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__subsf3>:
 41c:	50 58       	subi	r21, 0x80	; 128

0000041e <__addsf3>:
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 426:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>
 42a:	0e 94 92 03 	call	0x724	; 0x724 <__fp_pscA>
 42e:	38 f0       	brcs	.+14     	; 0x43e <__addsf3+0x20>
 430:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscB>
 434:	20 f0       	brcs	.+8      	; 0x43e <__addsf3+0x20>
 436:	39 f4       	brne	.+14     	; 0x446 <__addsf3+0x28>
 438:	9f 3f       	cpi	r25, 0xFF	; 255
 43a:	19 f4       	brne	.+6      	; 0x442 <__addsf3+0x24>
 43c:	26 f4       	brtc	.+8      	; 0x446 <__addsf3+0x28>
 43e:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>
 442:	0e f4       	brtc	.+2      	; 0x446 <__addsf3+0x28>
 444:	e0 95       	com	r30
 446:	e7 fb       	bst	r30, 7
 448:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>

0000044c <__addsf3x>:
 44c:	e9 2f       	mov	r30, r25
 44e:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_split3>
 452:	58 f3       	brcs	.-42     	; 0x42a <__addsf3+0xc>
 454:	ba 17       	cp	r27, r26
 456:	62 07       	cpc	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	84 07       	cpc	r24, r20
 45c:	95 07       	cpc	r25, r21
 45e:	20 f0       	brcs	.+8      	; 0x468 <__addsf3x+0x1c>
 460:	79 f4       	brne	.+30     	; 0x480 <__addsf3x+0x34>
 462:	a6 f5       	brtc	.+104    	; 0x4cc <__addsf3x+0x80>
 464:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_zero>
 468:	0e f4       	brtc	.+2      	; 0x46c <__addsf3x+0x20>
 46a:	e0 95       	com	r30
 46c:	0b 2e       	mov	r0, r27
 46e:	ba 2f       	mov	r27, r26
 470:	a0 2d       	mov	r26, r0
 472:	0b 01       	movw	r0, r22
 474:	b9 01       	movw	r22, r18
 476:	90 01       	movw	r18, r0
 478:	0c 01       	movw	r0, r24
 47a:	ca 01       	movw	r24, r20
 47c:	a0 01       	movw	r20, r0
 47e:	11 24       	eor	r1, r1
 480:	ff 27       	eor	r31, r31
 482:	59 1b       	sub	r21, r25
 484:	99 f0       	breq	.+38     	; 0x4ac <__addsf3x+0x60>
 486:	59 3f       	cpi	r21, 0xF9	; 249
 488:	50 f4       	brcc	.+20     	; 0x49e <__addsf3x+0x52>
 48a:	50 3e       	cpi	r21, 0xE0	; 224
 48c:	68 f1       	brcs	.+90     	; 0x4e8 <__addsf3x+0x9c>
 48e:	1a 16       	cp	r1, r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	a2 2f       	mov	r26, r18
 494:	23 2f       	mov	r18, r19
 496:	34 2f       	mov	r19, r20
 498:	44 27       	eor	r20, r20
 49a:	58 5f       	subi	r21, 0xF8	; 248
 49c:	f3 cf       	rjmp	.-26     	; 0x484 <__addsf3x+0x38>
 49e:	46 95       	lsr	r20
 4a0:	37 95       	ror	r19
 4a2:	27 95       	ror	r18
 4a4:	a7 95       	ror	r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	53 95       	inc	r21
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__addsf3x+0x52>
 4ac:	7e f4       	brtc	.+30     	; 0x4cc <__addsf3x+0x80>
 4ae:	1f 16       	cp	r1, r31
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	62 0b       	sbc	r22, r18
 4b4:	73 0b       	sbc	r23, r19
 4b6:	84 0b       	sbc	r24, r20
 4b8:	ba f0       	brmi	.+46     	; 0x4e8 <__addsf3x+0x9c>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	a1 f0       	breq	.+40     	; 0x4e6 <__addsf3x+0x9a>
 4be:	ff 0f       	add	r31, r31
 4c0:	bb 1f       	adc	r27, r27
 4c2:	66 1f       	adc	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	c2 f7       	brpl	.-16     	; 0x4ba <__addsf3x+0x6e>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__addsf3x+0x9c>
 4cc:	ba 0f       	add	r27, r26
 4ce:	62 1f       	adc	r22, r18
 4d0:	73 1f       	adc	r23, r19
 4d2:	84 1f       	adc	r24, r20
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <__addsf3x+0x9c>
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9e 3f       	cpi	r25, 0xFE	; 254
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__addsf3x+0x9a>
 4e4:	b0 cf       	rjmp	.-160    	; 0x446 <__addsf3+0x28>
 4e6:	93 95       	inc	r25
 4e8:	88 0f       	add	r24, r24
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <__addsf3x+0xa2>
 4ec:	99 27       	eor	r25, r25
 4ee:	ee 0f       	add	r30, r30
 4f0:	97 95       	ror	r25
 4f2:	87 95       	ror	r24
 4f4:	08 95       	ret

000004f6 <__cmpsf2>:
 4f6:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_cmp>
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <__cmpsf2+0x8>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret

00000500 <__divsf3>:
 500:	0e 94 94 02 	call	0x528	; 0x528 <__divsf3x>
 504:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>
 508:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscB>
 50c:	58 f0       	brcs	.+22     	; 0x524 <__divsf3+0x24>
 50e:	0e 94 92 03 	call	0x724	; 0x724 <__fp_pscA>
 512:	40 f0       	brcs	.+16     	; 0x524 <__divsf3+0x24>
 514:	29 f4       	brne	.+10     	; 0x520 <__divsf3+0x20>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	29 f0       	breq	.+10     	; 0x524 <__divsf3+0x24>
 51a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 51e:	51 11       	cpse	r21, r1
 520:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 524:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>

00000528 <__divsf3x>:
 528:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_split3>
 52c:	68 f3       	brcs	.-38     	; 0x508 <__divsf3+0x8>

0000052e <__divsf3_pse>:
 52e:	99 23       	and	r25, r25
 530:	b1 f3       	breq	.-20     	; 0x51e <__divsf3+0x1e>
 532:	55 23       	and	r21, r21
 534:	91 f3       	breq	.-28     	; 0x51a <__divsf3+0x1a>
 536:	95 1b       	sub	r25, r21
 538:	55 0b       	sbc	r21, r21
 53a:	bb 27       	eor	r27, r27
 53c:	aa 27       	eor	r26, r26
 53e:	62 17       	cp	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	38 f0       	brcs	.+14     	; 0x554 <__divsf3_pse+0x26>
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	5f 4f       	sbci	r21, 0xFF	; 255
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	44 1f       	adc	r20, r20
 550:	aa 1f       	adc	r26, r26
 552:	a9 f3       	breq	.-22     	; 0x53e <__divsf3_pse+0x10>
 554:	35 d0       	rcall	.+106    	; 0x5c0 <__divsf3_pse+0x92>
 556:	0e 2e       	mov	r0, r30
 558:	3a f0       	brmi	.+14     	; 0x568 <__divsf3_pse+0x3a>
 55a:	e0 e8       	ldi	r30, 0x80	; 128
 55c:	32 d0       	rcall	.+100    	; 0x5c2 <__divsf3_pse+0x94>
 55e:	91 50       	subi	r25, 0x01	; 1
 560:	50 40       	sbci	r21, 0x00	; 0
 562:	e6 95       	lsr	r30
 564:	00 1c       	adc	r0, r0
 566:	ca f7       	brpl	.-14     	; 0x55a <__divsf3_pse+0x2c>
 568:	2b d0       	rcall	.+86     	; 0x5c0 <__divsf3_pse+0x92>
 56a:	fe 2f       	mov	r31, r30
 56c:	29 d0       	rcall	.+82     	; 0x5c0 <__divsf3_pse+0x92>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	bb 1f       	adc	r27, r27
 576:	26 17       	cp	r18, r22
 578:	37 07       	cpc	r19, r23
 57a:	48 07       	cpc	r20, r24
 57c:	ab 07       	cpc	r26, r27
 57e:	b0 e8       	ldi	r27, 0x80	; 128
 580:	09 f0       	breq	.+2      	; 0x584 <__divsf3_pse+0x56>
 582:	bb 0b       	sbc	r27, r27
 584:	80 2d       	mov	r24, r0
 586:	bf 01       	movw	r22, r30
 588:	ff 27       	eor	r31, r31
 58a:	93 58       	subi	r25, 0x83	; 131
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	3a f0       	brmi	.+14     	; 0x59e <__divsf3_pse+0x70>
 590:	9e 3f       	cpi	r25, 0xFE	; 254
 592:	51 05       	cpc	r21, r1
 594:	78 f0       	brcs	.+30     	; 0x5b4 <__divsf3_pse+0x86>
 596:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 59a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 59e:	5f 3f       	cpi	r21, 0xFF	; 255
 5a0:	e4 f3       	brlt	.-8      	; 0x59a <__divsf3_pse+0x6c>
 5a2:	98 3e       	cpi	r25, 0xE8	; 232
 5a4:	d4 f3       	brlt	.-12     	; 0x59a <__divsf3_pse+0x6c>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b7 95       	ror	r27
 5ae:	f7 95       	ror	r31
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	c9 f7       	brne	.-14     	; 0x5a6 <__divsf3_pse+0x78>
 5b4:	88 0f       	add	r24, r24
 5b6:	91 1d       	adc	r25, r1
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret
 5c0:	e1 e0       	ldi	r30, 0x01	; 1
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	bb 1f       	adc	r27, r27
 5ca:	62 17       	cp	r22, r18
 5cc:	73 07       	cpc	r23, r19
 5ce:	84 07       	cpc	r24, r20
 5d0:	ba 07       	cpc	r27, r26
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__divsf3_pse+0xae>
 5d4:	62 1b       	sub	r22, r18
 5d6:	73 0b       	sbc	r23, r19
 5d8:	84 0b       	sbc	r24, r20
 5da:	ba 0b       	sbc	r27, r26
 5dc:	ee 1f       	adc	r30, r30
 5de:	88 f7       	brcc	.-30     	; 0x5c2 <__divsf3_pse+0x94>
 5e0:	e0 95       	com	r30
 5e2:	08 95       	ret

000005e4 <__fixsfsi>:
 5e4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixunssfsi>
 5e8:	68 94       	set
 5ea:	b1 11       	cpse	r27, r1
 5ec:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 5f0:	08 95       	ret

000005f2 <__fixunssfsi>:
 5f2:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_splitA>
 5f6:	88 f0       	brcs	.+34     	; 0x61a <__fixunssfsi+0x28>
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	98 f0       	brcs	.+38     	; 0x622 <__fixunssfsi+0x30>
 5fc:	b9 2f       	mov	r27, r25
 5fe:	99 27       	eor	r25, r25
 600:	b7 51       	subi	r27, 0x17	; 23
 602:	b0 f0       	brcs	.+44     	; 0x630 <__fixunssfsi+0x3e>
 604:	e1 f0       	breq	.+56     	; 0x63e <__fixunssfsi+0x4c>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	1a f0       	brmi	.+6      	; 0x616 <__fixunssfsi+0x24>
 610:	ba 95       	dec	r27
 612:	c9 f7       	brne	.-14     	; 0x606 <__fixunssfsi+0x14>
 614:	14 c0       	rjmp	.+40     	; 0x63e <__fixunssfsi+0x4c>
 616:	b1 30       	cpi	r27, 0x01	; 1
 618:	91 f0       	breq	.+36     	; 0x63e <__fixunssfsi+0x4c>
 61a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_zero>
 61e:	b1 e0       	ldi	r27, 0x01	; 1
 620:	08 95       	ret
 622:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_zero>
 626:	67 2f       	mov	r22, r23
 628:	78 2f       	mov	r23, r24
 62a:	88 27       	eor	r24, r24
 62c:	b8 5f       	subi	r27, 0xF8	; 248
 62e:	39 f0       	breq	.+14     	; 0x63e <__fixunssfsi+0x4c>
 630:	b9 3f       	cpi	r27, 0xF9	; 249
 632:	cc f3       	brlt	.-14     	; 0x626 <__fixunssfsi+0x34>
 634:	86 95       	lsr	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b3 95       	inc	r27
 63c:	d9 f7       	brne	.-10     	; 0x634 <__fixunssfsi+0x42>
 63e:	3e f4       	brtc	.+14     	; 0x64e <__fixunssfsi+0x5c>
 640:	90 95       	com	r25
 642:	80 95       	com	r24
 644:	70 95       	com	r23
 646:	61 95       	neg	r22
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <__floatunsisf>:
 650:	e8 94       	clt
 652:	09 c0       	rjmp	.+18     	; 0x666 <__floatsisf+0x12>

00000654 <__floatsisf>:
 654:	97 fb       	bst	r25, 7
 656:	3e f4       	brtc	.+14     	; 0x666 <__floatsisf+0x12>
 658:	90 95       	com	r25
 65a:	80 95       	com	r24
 65c:	70 95       	com	r23
 65e:	61 95       	neg	r22
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	8f 4f       	sbci	r24, 0xFF	; 255
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	99 23       	and	r25, r25
 668:	a9 f0       	breq	.+42     	; 0x694 <__floatsisf+0x40>
 66a:	f9 2f       	mov	r31, r25
 66c:	96 e9       	ldi	r25, 0x96	; 150
 66e:	bb 27       	eor	r27, r27
 670:	93 95       	inc	r25
 672:	f6 95       	lsr	r31
 674:	87 95       	ror	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	b7 95       	ror	r27
 67c:	f1 11       	cpse	r31, r1
 67e:	f8 cf       	rjmp	.-16     	; 0x670 <__floatsisf+0x1c>
 680:	fa f4       	brpl	.+62     	; 0x6c0 <__floatsisf+0x6c>
 682:	bb 0f       	add	r27, r27
 684:	11 f4       	brne	.+4      	; 0x68a <__floatsisf+0x36>
 686:	60 ff       	sbrs	r22, 0
 688:	1b c0       	rjmp	.+54     	; 0x6c0 <__floatsisf+0x6c>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <__floatsisf+0x6c>
 694:	88 23       	and	r24, r24
 696:	11 f0       	breq	.+4      	; 0x69c <__floatsisf+0x48>
 698:	96 e9       	ldi	r25, 0x96	; 150
 69a:	11 c0       	rjmp	.+34     	; 0x6be <__floatsisf+0x6a>
 69c:	77 23       	and	r23, r23
 69e:	21 f0       	breq	.+8      	; 0x6a8 <__floatsisf+0x54>
 6a0:	9e e8       	ldi	r25, 0x8E	; 142
 6a2:	87 2f       	mov	r24, r23
 6a4:	76 2f       	mov	r23, r22
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__floatsisf+0x5e>
 6a8:	66 23       	and	r22, r22
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__floatsisf+0x74>
 6ac:	96 e8       	ldi	r25, 0x86	; 134
 6ae:	86 2f       	mov	r24, r22
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	2a f0       	brmi	.+10     	; 0x6c0 <__floatsisf+0x6c>
 6b6:	9a 95       	dec	r25
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	da f7       	brpl	.-10     	; 0x6b6 <__floatsisf+0x62>
 6c0:	88 0f       	add	r24, r24
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__fp_cmp>:
 6ca:	99 0f       	add	r25, r25
 6cc:	00 08       	sbc	r0, r0
 6ce:	55 0f       	add	r21, r21
 6d0:	aa 0b       	sbc	r26, r26
 6d2:	e0 e8       	ldi	r30, 0x80	; 128
 6d4:	fe ef       	ldi	r31, 0xFE	; 254
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	e8 07       	cpc	r30, r24
 6dc:	f9 07       	cpc	r31, r25
 6de:	c0 f0       	brcs	.+48     	; 0x710 <__fp_cmp+0x46>
 6e0:	12 16       	cp	r1, r18
 6e2:	13 06       	cpc	r1, r19
 6e4:	e4 07       	cpc	r30, r20
 6e6:	f5 07       	cpc	r31, r21
 6e8:	98 f0       	brcs	.+38     	; 0x710 <__fp_cmp+0x46>
 6ea:	62 1b       	sub	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	95 0b       	sbc	r25, r21
 6f2:	39 f4       	brne	.+14     	; 0x702 <__fp_cmp+0x38>
 6f4:	0a 26       	eor	r0, r26
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_cmp+0x46>
 6f8:	23 2b       	or	r18, r19
 6fa:	24 2b       	or	r18, r20
 6fc:	25 2b       	or	r18, r21
 6fe:	21 f4       	brne	.+8      	; 0x708 <__fp_cmp+0x3e>
 700:	08 95       	ret
 702:	0a 26       	eor	r0, r26
 704:	09 f4       	brne	.+2      	; 0x708 <__fp_cmp+0x3e>
 706:	a1 40       	sbci	r26, 0x01	; 1
 708:	a6 95       	lsr	r26
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	81 1d       	adc	r24, r1
 70e:	81 1d       	adc	r24, r1
 710:	08 95       	ret

00000712 <__fp_inf>:
 712:	97 f9       	bld	r25, 7
 714:	9f 67       	ori	r25, 0x7F	; 127
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	08 95       	ret

0000071e <__fp_nan>:
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	80 ec       	ldi	r24, 0xC0	; 192
 722:	08 95       	ret

00000724 <__fp_pscA>:
 724:	00 24       	eor	r0, r0
 726:	0a 94       	dec	r0
 728:	16 16       	cp	r1, r22
 72a:	17 06       	cpc	r1, r23
 72c:	18 06       	cpc	r1, r24
 72e:	09 06       	cpc	r0, r25
 730:	08 95       	ret

00000732 <__fp_pscB>:
 732:	00 24       	eor	r0, r0
 734:	0a 94       	dec	r0
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	14 06       	cpc	r1, r20
 73c:	05 06       	cpc	r0, r21
 73e:	08 95       	ret

00000740 <__fp_round>:
 740:	09 2e       	mov	r0, r25
 742:	03 94       	inc	r0
 744:	00 0c       	add	r0, r0
 746:	11 f4       	brne	.+4      	; 0x74c <__fp_round+0xc>
 748:	88 23       	and	r24, r24
 74a:	52 f0       	brmi	.+20     	; 0x760 <__fp_round+0x20>
 74c:	bb 0f       	add	r27, r27
 74e:	40 f4       	brcc	.+16     	; 0x760 <__fp_round+0x20>
 750:	bf 2b       	or	r27, r31
 752:	11 f4       	brne	.+4      	; 0x758 <__fp_round+0x18>
 754:	60 ff       	sbrs	r22, 0
 756:	04 c0       	rjmp	.+8      	; 0x760 <__fp_round+0x20>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_split3>:
 762:	57 fd       	sbrc	r21, 7
 764:	90 58       	subi	r25, 0x80	; 128
 766:	44 0f       	add	r20, r20
 768:	55 1f       	adc	r21, r21
 76a:	59 f0       	breq	.+22     	; 0x782 <__fp_splitA+0x10>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	71 f0       	breq	.+28     	; 0x78c <__fp_splitA+0x1a>
 770:	47 95       	ror	r20

00000772 <__fp_splitA>:
 772:	88 0f       	add	r24, r24
 774:	97 fb       	bst	r25, 7
 776:	99 1f       	adc	r25, r25
 778:	61 f0       	breq	.+24     	; 0x792 <__fp_splitA+0x20>
 77a:	9f 3f       	cpi	r25, 0xFF	; 255
 77c:	79 f0       	breq	.+30     	; 0x79c <__fp_splitA+0x2a>
 77e:	87 95       	ror	r24
 780:	08 95       	ret
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	55 1f       	adc	r21, r21
 78a:	f2 cf       	rjmp	.-28     	; 0x770 <__fp_split3+0xe>
 78c:	46 95       	lsr	r20
 78e:	f1 df       	rcall	.-30     	; 0x772 <__fp_splitA>
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <__fp_splitA+0x30>
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	18 06       	cpc	r1, r24
 798:	99 1f       	adc	r25, r25
 79a:	f1 cf       	rjmp	.-30     	; 0x77e <__fp_splitA+0xc>
 79c:	86 95       	lsr	r24
 79e:	71 05       	cpc	r23, r1
 7a0:	61 05       	cpc	r22, r1
 7a2:	08 94       	sec
 7a4:	08 95       	ret

000007a6 <__fp_zero>:
 7a6:	e8 94       	clt

000007a8 <__fp_szero>:
 7a8:	bb 27       	eor	r27, r27
 7aa:	66 27       	eor	r22, r22
 7ac:	77 27       	eor	r23, r23
 7ae:	cb 01       	movw	r24, r22
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <__gesf2>:
 7b4:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_cmp>
 7b8:	08 f4       	brcc	.+2      	; 0x7bc <__gesf2+0x8>
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	08 95       	ret

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
