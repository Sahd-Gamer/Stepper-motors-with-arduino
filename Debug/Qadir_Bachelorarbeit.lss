
Qadir_Bachelorarbeit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000630  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010a  0080010a  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd7  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  000015ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000856  00000000  00000000  00001e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000607  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000033dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9e:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init>:
	}
    return 0;
}
void Init(void) //Initialisiert die einzelnen Init Funktionen
{
	Timer0_Init();
  a6:	0e 94 46 01 	call	0x28c	; 0x28c <Timer0_Init>
	Timer1_Init();
  aa:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Timer1_Init>
  ae:	08 95       	ret

000000b0 <main>:
unsigned char ucFlagBlink_X = 0; // Variable für interrupt von Timer0 für jede 500ms 
unsigned char ucFlagBlink_Y = 0; // Variable für interrupt von Timer0 für jede 500ms 
unsigned char t = 100; // Eingabe der Zeit
int main(void)
{
	Init();//Initialiersierung
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <Init>
	// Umwandlung in Digitatl, in Schritten:
	my = ypos/(0.66)+1;
  b4:	23 ec       	ldi	r18, 0xC3	; 195
  b6:	35 ef       	ldi	r19, 0xF5	; 245
  b8:	48 e2       	ldi	r20, 0x28	; 40
  ba:	5f e3       	ldi	r21, 0x3F	; 63
  bc:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <ypos>
  c0:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <ypos+0x1>
  c4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ypos+0x2>
  c8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ypos+0x3>
  cc:	0e 94 1d 02 	call	0x43a	; 0x43a <__divsf3>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	40 e8       	ldi	r20, 0x80	; 128
  d6:	5f e3       	ldi	r21, 0x3F	; 63
  d8:	0e 94 b1 01 	call	0x362	; 0x362 <__addsf3>
  dc:	0e 94 8f 02 	call	0x51e	; 0x51e <__fixsfsi>
  e0:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <my>
  e4:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <my+0x1>
  e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <my+0x2>
  ec:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <my+0x3>
	mx = -xpos/(0.66)+1;
  f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <xpos>
  f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <xpos+0x1>
  f8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <xpos+0x2>
  fc:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <xpos+0x3>
 100:	bc 01       	movw	r22, r24
 102:	cd 01       	movw	r24, r26
 104:	90 58       	subi	r25, 0x80	; 128
 106:	23 ec       	ldi	r18, 0xC3	; 195
 108:	35 ef       	ldi	r19, 0xF5	; 245
 10a:	48 e2       	ldi	r20, 0x28	; 40
 10c:	5f e3       	ldi	r21, 0x3F	; 63
 10e:	0e 94 1d 02 	call	0x43a	; 0x43a <__divsf3>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	5f e3       	ldi	r21, 0x3F	; 63
 11a:	0e 94 b1 01 	call	0x362	; 0x362 <__addsf3>
 11e:	0e 94 8f 02 	call	0x51e	; 0x51e <__fixsfsi>
 122:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <mx>
 126:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <mx+0x1>
 12a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mx+0x2>
 12e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <mx+0x3>
	//float steps_p_mm = (turns_per_mm*steps_value)/(microstep);//Schritte pro mm 
	//float ziel = d * 10 *steps_p_mm;// Weg in Centimeter // Eingabe für die Motoren
	//======================================================================================//

    // setup dirPin and stepPin as output // Bitts werden gesetzt = 1
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	8c 66       	ori	r24, 0x6C	; 108
 136:	8a b9       	out	0x0a, r24	; 10
		//movingToX (mx);
		//movingToY (my);
		
	while(1){
		for (int i = 0; i < t; i++ )
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	9e c0       	rjmp	.+316    	; 0x27a <main+0x1ca>
		{
			unsigned char z = t;	
			if (t > 0)
 13e:	88 23       	and	r24, r24
 140:	09 f4       	brne	.+2      	; 0x144 <main+0x94>
 142:	99 c0       	rjmp	.+306    	; 0x276 <main+0x1c6>
			{
				
				z %=2;
				if (z == 0)
 144:	98 2f       	mov	r25, r24
 146:	91 70       	andi	r25, 0x01	; 1
 148:	80 fd       	sbrc	r24, 0
 14a:	49 c0       	rjmp	.+146    	; 0x1de <main+0x12e>
				{
					t--;
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					if (mx > 0)
 152:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mx>
 156:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <mx+0x1>
 15a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <mx+0x2>
 15e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <mx+0x3>
 162:	18 16       	cp	r1, r24
 164:	19 06       	cpc	r1, r25
 166:	1a 06       	cpc	r1, r26
 168:	1b 06       	cpc	r1, r27
 16a:	dc f4       	brge	.+54     	; 0x1a2 <main+0xf2>
					{		
							mx--;
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	a1 09       	sbc	r26, r1
 170:	b1 09       	sbc	r27, r1
 172:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mx>
 176:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <mx+0x1>
 17a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <mx+0x2>
 17e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <mx+0x3>
							//send low pulse for clockwise direction
							PORTD &= ~dirPinX;
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8f 7d       	andi	r24, 0xDF	; 223
 186:	8b b9       	out	0x0b, r24	; 11
							//send 200 pulses to rotate One full cycle
							PORTD |= stepPinX;
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	8b b9       	out	0x0b, r24	; 11
							//_delay_ms(1);
							PORTD &= ~stepPinX;
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xe8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xee>
 19e:	00 00       	nop
 1a0:	1c c0       	rjmp	.+56     	; 0x1da <main+0x12a>
							_delay_ms(1); //
							
					} else if (mx < 0)
 1a2:	bb 23       	and	r27, r27
 1a4:	d4 f4       	brge	.+52     	; 0x1da <main+0x12a>
					{
						mx++;
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	a1 1d       	adc	r26, r1
 1aa:	b1 1d       	adc	r27, r1
 1ac:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mx>
 1b0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <mx+0x1>
 1b4:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <mx+0x2>
 1b8:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <mx+0x3>
						//mx *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinX;
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 62       	ori	r24, 0x20	; 32
 1c0:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinX;
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinX;
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x122>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x128>
 1d8:	00 00       	nop
						_delay_ms(1);
						}else{
						
						}
						z= t;
 1da:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
					}
				if (z == 1)
 1de:	91 30       	cpi	r25, 0x01	; 1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0x134>
 1e2:	49 c0       	rjmp	.+146    	; 0x276 <main+0x1c6>
				{
					t--;
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					if(my > 0)
 1ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <my>
 1f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <my+0x1>
 1f6:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <my+0x2>
 1fa:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <my+0x3>
 1fe:	18 16       	cp	r1, r24
 200:	19 06       	cpc	r1, r25
 202:	1a 06       	cpc	r1, r26
 204:	1b 06       	cpc	r1, r27
 206:	dc f4       	brge	.+54     	; 0x23e <main+0x18e>
					{
						my--;
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	a1 09       	sbc	r26, r1
 20c:	b1 09       	sbc	r27, r1
 20e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <my>
 212:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <my+0x1>
 216:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <my+0x2>
 21a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <my+0x3>
						PORTD &= ~dirPinY;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8f 7b       	andi	r24, 0xBF	; 191
 222:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	88 60       	ori	r24, 0x08	; 8
 228:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	87 7f       	andi	r24, 0xF7	; 247
 22e:	8b b9       	out	0x0b, r24	; 11
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x184>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x18a>
 23a:	00 00       	nop
 23c:	1c c0       	rjmp	.+56     	; 0x276 <main+0x1c6>
						_delay_ms(1);
					} else if (my < 0)
 23e:	bb 23       	and	r27, r27
 240:	d4 f4       	brge	.+52     	; 0x276 <main+0x1c6>
					{
						my++;
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	a1 1d       	adc	r26, r1
 246:	b1 1d       	adc	r27, r1
 248:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <my>
 24c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <my+0x1>
 250:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <my+0x2>
 254:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <my+0x3>
						//my *=-1;
						//send High pulse for anti-clockwise direction
						PORTD |= dirPinY;
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8b b9       	out	0x0b, r24	; 11
						//send 200 pulses to rotate One full cycle
						
						PORTD |= stepPinY;
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	88 60       	ori	r24, 0x08	; 8
 262:	8b b9       	out	0x0b, r24	; 11
						//_delay_ms(1);
						PORTD &= ~stepPinY;
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	87 7f       	andi	r24, 0xF7	; 247
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x1be>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x1c4>
 274:	00 00       	nop
    DDRD |= dirPinX | stepPinX | dirPinY| stepPinY ;
		//movingToX (mx);
		//movingToY (my);
		
	while(1){
		for (int i = 0; i < t; i++ )
 276:	2f 5f       	subi	r18, 0xFF	; 255
 278:	3f 4f       	sbci	r19, 0xFF	; 255
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	48 2f       	mov	r20, r24
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	24 17       	cp	r18, r20
 284:	35 07       	cpc	r19, r21
 286:	0c f4       	brge	.+2      	; 0x28a <main+0x1da>
 288:	5a cf       	rjmp	.-332    	; 0x13e <main+0x8e>
 28a:	56 cf       	rjmp	.-340    	; 0x138 <main+0x88>

0000028c <Timer0_Init>:
	{
		ucFlag500ms = 0;
		return TIMER_TRIGGERED;
	}
	return TIMER_RUNNING;
}
 28c:	84 b5       	in	r24, 0x24	; 36
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	84 bd       	out	0x24, r24	; 36
 292:	85 b5       	in	r24, 0x25	; 37
 294:	85 60       	ori	r24, 0x05	; 5
 296:	85 bd       	out	0x25, r24	; 37
 298:	8c e9       	ldi	r24, 0x9C	; 156
 29a:	87 bd       	out	0x27, r24	; 39
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2a2:	78 94       	sei
 2a4:	08 95       	ret

000002a6 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8f 93       	push	r24
	ucFlag10ms = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ucFlag10ms>
	ucCnt100ms++;
 2b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ucCnt100ms>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ucCnt100ms>
	if(ucCnt100ms == 10)
 2c2:	8a 30       	cpi	r24, 0x0A	; 10
 2c4:	89 f4       	brne	.+34     	; 0x2e8 <__vector_14+0x42>
	{//100ms sind vergangen
		ucCnt100ms = 0;
 2c6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ucCnt100ms>
		ucFLag100ms = 1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ucFLag100ms>
		ucCnt500ms++;
 2d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if (ucCnt500ms==5)
 2da:	85 30       	cpi	r24, 0x05	; 5
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <__vector_14+0x42>
		{
			ucCnt500ms=0;
 2de:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			ucFlag500ms=1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ucFlag500ms>
		}
	}
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <Timer1_Init>:
	{
		ucFlagT1_1000ms = 0;
		return TIMER1_TRIGGERED;
	}
	return TIMER1_RUNNING;
}
 2f4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2fe:	2c e9       	ldi	r18, 0x9C	; 156
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 306:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 30a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 30e:	78 94       	sei
 310:	08 95       	ret

00000312 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	8f 93       	push	r24
	ucFlagT1_10ms = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ucFlagT1_10ms>
	ucCntT1_10ms++;		// wird jede 10 ms inkrementiert
 324:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ucCntT1_10ms>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ucCntT1_10ms>
	if(ucCntT1_10ms == 10)
 32e:	8a 30       	cpi	r24, 0x0A	; 10
 330:	89 f4       	brne	.+34     	; 0x354 <__vector_11+0x42>
	// disen kannst du verändern um zb. 1s zu erhalten mal 10
	// und dann sagst du einfach ucFlag1000ms =1 weil es dann erfüllt ist!!!
	{//100ms sind vergangen
		ucCntT1_10ms = 0;
 332:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ucCntT1_10ms>
		ucFlagT1_100ms = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ucFlagT1_100ms>
		
		// will man z.B. für 1 Sekunde aber die Funktion müssen wir dann in der main
		// wie die andren Funktionen dann Programmieren :)
		ucCntT1_100ms++;
 33c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ucCntT1_100ms>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ucCntT1_100ms>
		if (ucCntT1_100ms==10)
 346:	8a 30       	cpi	r24, 0x0A	; 10
 348:	29 f4       	brne	.+10     	; 0x354 <__vector_11+0x42>
		{
			ucCntT1_100ms=0;
 34a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ucCntT1_100ms>
			ucFlagT1_1000ms=1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ucFlagT1_1000ms>
		}
	}
 354:	8f 91       	pop	r24
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__subsf3>:
 360:	50 58       	subi	r21, 0x80	; 128

00000362 <__addsf3>:
 362:	bb 27       	eor	r27, r27
 364:	aa 27       	eor	r26, r26
 366:	0e 94 c8 01 	call	0x390	; 0x390 <__addsf3x>
 36a:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__fp_round>
 36e:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_pscA>
 372:	38 f0       	brcs	.+14     	; 0x382 <__addsf3+0x20>
 374:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fp_pscB>
 378:	20 f0       	brcs	.+8      	; 0x382 <__addsf3+0x20>
 37a:	39 f4       	brne	.+14     	; 0x38a <__addsf3+0x28>
 37c:	9f 3f       	cpi	r25, 0xFF	; 255
 37e:	19 f4       	brne	.+6      	; 0x386 <__addsf3+0x24>
 380:	26 f4       	brtc	.+8      	; 0x38a <__addsf3+0x28>
 382:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_nan>
 386:	0e f4       	brtc	.+2      	; 0x38a <__addsf3+0x28>
 388:	e0 95       	com	r30
 38a:	e7 fb       	bst	r30, 7
 38c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_inf>

00000390 <__addsf3x>:
 390:	e9 2f       	mov	r30, r25
 392:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_split3>
 396:	58 f3       	brcs	.-42     	; 0x36e <__addsf3+0xc>
 398:	ba 17       	cp	r27, r26
 39a:	62 07       	cpc	r22, r18
 39c:	73 07       	cpc	r23, r19
 39e:	84 07       	cpc	r24, r20
 3a0:	95 07       	cpc	r25, r21
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <__addsf3x+0x1c>
 3a4:	79 f4       	brne	.+30     	; 0x3c4 <__addsf3x+0x34>
 3a6:	a6 f5       	brtc	.+104    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3a8:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_zero>
 3ac:	0e f4       	brtc	.+2      	; 0x3b0 <__addsf3x+0x20>
 3ae:	e0 95       	com	r30
 3b0:	0b 2e       	mov	r0, r27
 3b2:	ba 2f       	mov	r27, r26
 3b4:	a0 2d       	mov	r26, r0
 3b6:	0b 01       	movw	r0, r22
 3b8:	b9 01       	movw	r22, r18
 3ba:	90 01       	movw	r18, r0
 3bc:	0c 01       	movw	r0, r24
 3be:	ca 01       	movw	r24, r20
 3c0:	a0 01       	movw	r20, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	ff 27       	eor	r31, r31
 3c6:	59 1b       	sub	r21, r25
 3c8:	99 f0       	breq	.+38     	; 0x3f0 <__addsf3x+0x60>
 3ca:	59 3f       	cpi	r21, 0xF9	; 249
 3cc:	50 f4       	brcc	.+20     	; 0x3e2 <__addsf3x+0x52>
 3ce:	50 3e       	cpi	r21, 0xE0	; 224
 3d0:	68 f1       	brcs	.+90     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3d2:	1a 16       	cp	r1, r26
 3d4:	f0 40       	sbci	r31, 0x00	; 0
 3d6:	a2 2f       	mov	r26, r18
 3d8:	23 2f       	mov	r18, r19
 3da:	34 2f       	mov	r19, r20
 3dc:	44 27       	eor	r20, r20
 3de:	58 5f       	subi	r21, 0xF8	; 248
 3e0:	f3 cf       	rjmp	.-26     	; 0x3c8 <__addsf3x+0x38>
 3e2:	46 95       	lsr	r20
 3e4:	37 95       	ror	r19
 3e6:	27 95       	ror	r18
 3e8:	a7 95       	ror	r26
 3ea:	f0 40       	sbci	r31, 0x00	; 0
 3ec:	53 95       	inc	r21
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <__addsf3x+0x52>
 3f0:	7e f4       	brtc	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f2:	1f 16       	cp	r1, r31
 3f4:	ba 0b       	sbc	r27, r26
 3f6:	62 0b       	sbc	r22, r18
 3f8:	73 0b       	sbc	r23, r19
 3fa:	84 0b       	sbc	r24, r20
 3fc:	ba f0       	brmi	.+46     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3fe:	91 50       	subi	r25, 0x01	; 1
 400:	a1 f0       	breq	.+40     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 402:	ff 0f       	add	r31, r31
 404:	bb 1f       	adc	r27, r27
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	c2 f7       	brpl	.-16     	; 0x3fe <__addsf3x+0x6e>
 40e:	0e c0       	rjmp	.+28     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 410:	ba 0f       	add	r27, r26
 412:	62 1f       	adc	r22, r18
 414:	73 1f       	adc	r23, r19
 416:	84 1f       	adc	r24, r20
 418:	48 f4       	brcc	.+18     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41a:	87 95       	ror	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b7 95       	ror	r27
 422:	f7 95       	ror	r31
 424:	9e 3f       	cpi	r25, 0xFE	; 254
 426:	08 f0       	brcs	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	b0 cf       	rjmp	.-160    	; 0x38a <__addsf3+0x28>
 42a:	93 95       	inc	r25
 42c:	88 0f       	add	r24, r24
 42e:	08 f0       	brcs	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 430:	99 27       	eor	r25, r25
 432:	ee 0f       	add	r30, r30
 434:	97 95       	ror	r25
 436:	87 95       	ror	r24
 438:	08 95       	ret

0000043a <__divsf3>:
 43a:	0e 94 31 02 	call	0x462	; 0x462 <__divsf3x>
 43e:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__fp_round>
 442:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fp_pscB>
 446:	58 f0       	brcs	.+22     	; 0x45e <__divsf3+0x24>
 448:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_pscA>
 44c:	40 f0       	brcs	.+16     	; 0x45e <__divsf3+0x24>
 44e:	29 f4       	brne	.+10     	; 0x45a <__divsf3+0x20>
 450:	5f 3f       	cpi	r21, 0xFF	; 255
 452:	29 f0       	breq	.+10     	; 0x45e <__divsf3+0x24>
 454:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_inf>
 458:	51 11       	cpse	r21, r1
 45a:	0c 94 10 03 	jmp	0x620	; 0x620 <__fp_szero>
 45e:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_nan>

00000462 <__divsf3x>:
 462:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_split3>
 466:	68 f3       	brcs	.-38     	; 0x442 <__divsf3+0x8>

00000468 <__divsf3_pse>:
 468:	99 23       	and	r25, r25
 46a:	b1 f3       	breq	.-20     	; 0x458 <__divsf3+0x1e>
 46c:	55 23       	and	r21, r21
 46e:	91 f3       	breq	.-28     	; 0x454 <__divsf3+0x1a>
 470:	95 1b       	sub	r25, r21
 472:	55 0b       	sbc	r21, r21
 474:	bb 27       	eor	r27, r27
 476:	aa 27       	eor	r26, r26
 478:	62 17       	cp	r22, r18
 47a:	73 07       	cpc	r23, r19
 47c:	84 07       	cpc	r24, r20
 47e:	38 f0       	brcs	.+14     	; 0x48e <__divsf3_pse+0x26>
 480:	9f 5f       	subi	r25, 0xFF	; 255
 482:	5f 4f       	sbci	r21, 0xFF	; 255
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	44 1f       	adc	r20, r20
 48a:	aa 1f       	adc	r26, r26
 48c:	a9 f3       	breq	.-22     	; 0x478 <__divsf3_pse+0x10>
 48e:	35 d0       	rcall	.+106    	; 0x4fa <__divsf3_pse+0x92>
 490:	0e 2e       	mov	r0, r30
 492:	3a f0       	brmi	.+14     	; 0x4a2 <__divsf3_pse+0x3a>
 494:	e0 e8       	ldi	r30, 0x80	; 128
 496:	32 d0       	rcall	.+100    	; 0x4fc <__divsf3_pse+0x94>
 498:	91 50       	subi	r25, 0x01	; 1
 49a:	50 40       	sbci	r21, 0x00	; 0
 49c:	e6 95       	lsr	r30
 49e:	00 1c       	adc	r0, r0
 4a0:	ca f7       	brpl	.-14     	; 0x494 <__divsf3_pse+0x2c>
 4a2:	2b d0       	rcall	.+86     	; 0x4fa <__divsf3_pse+0x92>
 4a4:	fe 2f       	mov	r31, r30
 4a6:	29 d0       	rcall	.+82     	; 0x4fa <__divsf3_pse+0x92>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	bb 1f       	adc	r27, r27
 4b0:	26 17       	cp	r18, r22
 4b2:	37 07       	cpc	r19, r23
 4b4:	48 07       	cpc	r20, r24
 4b6:	ab 07       	cpc	r26, r27
 4b8:	b0 e8       	ldi	r27, 0x80	; 128
 4ba:	09 f0       	breq	.+2      	; 0x4be <__divsf3_pse+0x56>
 4bc:	bb 0b       	sbc	r27, r27
 4be:	80 2d       	mov	r24, r0
 4c0:	bf 01       	movw	r22, r30
 4c2:	ff 27       	eor	r31, r31
 4c4:	93 58       	subi	r25, 0x83	; 131
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	3a f0       	brmi	.+14     	; 0x4d8 <__divsf3_pse+0x70>
 4ca:	9e 3f       	cpi	r25, 0xFE	; 254
 4cc:	51 05       	cpc	r21, r1
 4ce:	78 f0       	brcs	.+30     	; 0x4ee <__divsf3_pse+0x86>
 4d0:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_inf>
 4d4:	0c 94 10 03 	jmp	0x620	; 0x620 <__fp_szero>
 4d8:	5f 3f       	cpi	r21, 0xFF	; 255
 4da:	e4 f3       	brlt	.-8      	; 0x4d4 <__divsf3_pse+0x6c>
 4dc:	98 3e       	cpi	r25, 0xE8	; 232
 4de:	d4 f3       	brlt	.-12     	; 0x4d4 <__divsf3_pse+0x6c>
 4e0:	86 95       	lsr	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b7 95       	ror	r27
 4e8:	f7 95       	ror	r31
 4ea:	9f 5f       	subi	r25, 0xFF	; 255
 4ec:	c9 f7       	brne	.-14     	; 0x4e0 <__divsf3_pse+0x78>
 4ee:	88 0f       	add	r24, r24
 4f0:	91 1d       	adc	r25, r1
 4f2:	96 95       	lsr	r25
 4f4:	87 95       	ror	r24
 4f6:	97 f9       	bld	r25, 7
 4f8:	08 95       	ret
 4fa:	e1 e0       	ldi	r30, 0x01	; 1
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	bb 1f       	adc	r27, r27
 504:	62 17       	cp	r22, r18
 506:	73 07       	cpc	r23, r19
 508:	84 07       	cpc	r24, r20
 50a:	ba 07       	cpc	r27, r26
 50c:	20 f0       	brcs	.+8      	; 0x516 <__divsf3_pse+0xae>
 50e:	62 1b       	sub	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	ba 0b       	sbc	r27, r26
 516:	ee 1f       	adc	r30, r30
 518:	88 f7       	brcc	.-30     	; 0x4fc <__divsf3_pse+0x94>
 51a:	e0 95       	com	r30
 51c:	08 95       	ret

0000051e <__fixsfsi>:
 51e:	0e 94 96 02 	call	0x52c	; 0x52c <__fixunssfsi>
 522:	68 94       	set
 524:	b1 11       	cpse	r27, r1
 526:	0c 94 10 03 	jmp	0x620	; 0x620 <__fp_szero>
 52a:	08 95       	ret

0000052c <__fixunssfsi>:
 52c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_splitA>
 530:	88 f0       	brcs	.+34     	; 0x554 <__fixunssfsi+0x28>
 532:	9f 57       	subi	r25, 0x7F	; 127
 534:	98 f0       	brcs	.+38     	; 0x55c <__fixunssfsi+0x30>
 536:	b9 2f       	mov	r27, r25
 538:	99 27       	eor	r25, r25
 53a:	b7 51       	subi	r27, 0x17	; 23
 53c:	b0 f0       	brcs	.+44     	; 0x56a <__fixunssfsi+0x3e>
 53e:	e1 f0       	breq	.+56     	; 0x578 <__fixunssfsi+0x4c>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	1a f0       	brmi	.+6      	; 0x550 <__fixunssfsi+0x24>
 54a:	ba 95       	dec	r27
 54c:	c9 f7       	brne	.-14     	; 0x540 <__fixunssfsi+0x14>
 54e:	14 c0       	rjmp	.+40     	; 0x578 <__fixunssfsi+0x4c>
 550:	b1 30       	cpi	r27, 0x01	; 1
 552:	91 f0       	breq	.+36     	; 0x578 <__fixunssfsi+0x4c>
 554:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_zero>
 558:	b1 e0       	ldi	r27, 0x01	; 1
 55a:	08 95       	ret
 55c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_zero>
 560:	67 2f       	mov	r22, r23
 562:	78 2f       	mov	r23, r24
 564:	88 27       	eor	r24, r24
 566:	b8 5f       	subi	r27, 0xF8	; 248
 568:	39 f0       	breq	.+14     	; 0x578 <__fixunssfsi+0x4c>
 56a:	b9 3f       	cpi	r27, 0xF9	; 249
 56c:	cc f3       	brlt	.-14     	; 0x560 <__fixunssfsi+0x34>
 56e:	86 95       	lsr	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b3 95       	inc	r27
 576:	d9 f7       	brne	.-10     	; 0x56e <__fixunssfsi+0x42>
 578:	3e f4       	brtc	.+14     	; 0x588 <__fixunssfsi+0x5c>
 57a:	90 95       	com	r25
 57c:	80 95       	com	r24
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	08 95       	ret

0000058a <__fp_inf>:
 58a:	97 f9       	bld	r25, 7
 58c:	9f 67       	ori	r25, 0x7F	; 127
 58e:	80 e8       	ldi	r24, 0x80	; 128
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	08 95       	ret

00000596 <__fp_nan>:
 596:	9f ef       	ldi	r25, 0xFF	; 255
 598:	80 ec       	ldi	r24, 0xC0	; 192
 59a:	08 95       	ret

0000059c <__fp_pscA>:
 59c:	00 24       	eor	r0, r0
 59e:	0a 94       	dec	r0
 5a0:	16 16       	cp	r1, r22
 5a2:	17 06       	cpc	r1, r23
 5a4:	18 06       	cpc	r1, r24
 5a6:	09 06       	cpc	r0, r25
 5a8:	08 95       	ret

000005aa <__fp_pscB>:
 5aa:	00 24       	eor	r0, r0
 5ac:	0a 94       	dec	r0
 5ae:	12 16       	cp	r1, r18
 5b0:	13 06       	cpc	r1, r19
 5b2:	14 06       	cpc	r1, r20
 5b4:	05 06       	cpc	r0, r21
 5b6:	08 95       	ret

000005b8 <__fp_round>:
 5b8:	09 2e       	mov	r0, r25
 5ba:	03 94       	inc	r0
 5bc:	00 0c       	add	r0, r0
 5be:	11 f4       	brne	.+4      	; 0x5c4 <__fp_round+0xc>
 5c0:	88 23       	and	r24, r24
 5c2:	52 f0       	brmi	.+20     	; 0x5d8 <__fp_round+0x20>
 5c4:	bb 0f       	add	r27, r27
 5c6:	40 f4       	brcc	.+16     	; 0x5d8 <__fp_round+0x20>
 5c8:	bf 2b       	or	r27, r31
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__fp_round+0x18>
 5cc:	60 ff       	sbrs	r22, 0
 5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__fp_round+0x20>
 5d0:	6f 5f       	subi	r22, 0xFF	; 255
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	08 95       	ret

000005da <__fp_split3>:
 5da:	57 fd       	sbrc	r21, 7
 5dc:	90 58       	subi	r25, 0x80	; 128
 5de:	44 0f       	add	r20, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	59 f0       	breq	.+22     	; 0x5fa <__fp_splitA+0x10>
 5e4:	5f 3f       	cpi	r21, 0xFF	; 255
 5e6:	71 f0       	breq	.+28     	; 0x604 <__fp_splitA+0x1a>
 5e8:	47 95       	ror	r20

000005ea <__fp_splitA>:
 5ea:	88 0f       	add	r24, r24
 5ec:	97 fb       	bst	r25, 7
 5ee:	99 1f       	adc	r25, r25
 5f0:	61 f0       	breq	.+24     	; 0x60a <__fp_splitA+0x20>
 5f2:	9f 3f       	cpi	r25, 0xFF	; 255
 5f4:	79 f0       	breq	.+30     	; 0x614 <__fp_splitA+0x2a>
 5f6:	87 95       	ror	r24
 5f8:	08 95       	ret
 5fa:	12 16       	cp	r1, r18
 5fc:	13 06       	cpc	r1, r19
 5fe:	14 06       	cpc	r1, r20
 600:	55 1f       	adc	r21, r21
 602:	f2 cf       	rjmp	.-28     	; 0x5e8 <__fp_split3+0xe>
 604:	46 95       	lsr	r20
 606:	f1 df       	rcall	.-30     	; 0x5ea <__fp_splitA>
 608:	08 c0       	rjmp	.+16     	; 0x61a <__fp_splitA+0x30>
 60a:	16 16       	cp	r1, r22
 60c:	17 06       	cpc	r1, r23
 60e:	18 06       	cpc	r1, r24
 610:	99 1f       	adc	r25, r25
 612:	f1 cf       	rjmp	.-30     	; 0x5f6 <__fp_splitA+0xc>
 614:	86 95       	lsr	r24
 616:	71 05       	cpc	r23, r1
 618:	61 05       	cpc	r22, r1
 61a:	08 94       	sec
 61c:	08 95       	ret

0000061e <__fp_zero>:
 61e:	e8 94       	clt

00000620 <__fp_szero>:
 620:	bb 27       	eor	r27, r27
 622:	66 27       	eor	r22, r22
 624:	77 27       	eor	r23, r23
 626:	cb 01       	movw	r24, r22
 628:	97 f9       	bld	r25, 7
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
